{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Install Genesis System Get on board via instructions for getting the Genesis sources into your Eclipse development environment with Git.","title":"Genesis System"},{"location":"#install-genesis-system","text":"Get on board via instructions for getting the Genesis sources into your Eclipse development environment with Git.","title":"Install Genesis System"},{"location":"atomic/","text":"ATOMIC Inference Rule Base","title":"Inference Rules - ATOMIC"},{"location":"atomic/#atomic-inference-rule-base","text":"","title":"ATOMIC Inference Rule Base"},{"location":"classification/","text":"Classification Genesis uses WordNet to get classification threads of entities. Ordinary classification If you want to associate a name with a single thread, write as follows: John is a person. The result is that John has just one thread: thing entity physical-entity object whole living-thing organism person name john Note that the final element in the thread is the name of the entity; the penultimate element is a marker that signals a name. This convention is exploited by the matcher. On the other hand, if you want a name to have an additional thread, you write: John is also a criminal. The result is that John has an added thread: thing entity physical-entity object whole living-thing organism person name john thing entity physical-entity object whole living-thing organism person bad-person wrongdoer principal criminal name john Again, note that the final elements in the threads are the name of the entity; the penultimate element is a marker that signals a name. Finally, maybe you want to define a class not in wordnet: A bouvier is a kind of dog. The result is: thing entity physical-entity object whole living-thing organism animal chordate vertebrate mammal placental carnivore canine dog bouvier Note that there is no name marker. Assert classification Sometimes you will want to specify a complete thread for a word or phrase. This first come up in persuasive story telling when Sila Sayan wanted to declare many properties that make someone likable or unlikable. Assert thread thing, likable, good parent. Assert thread thing, likable, caring. It also became useful to be able to specify opposites: Likable is the opposite of unlikable. Specify classification. Suppose you say: A rat scared Mary. Alas, wordnet supplies five meanings for rat, three of which are subclasses of people. To order Genesis to limit itself to the three, you can use the following convention: A (rat person) scared Mary. And if you really want to be specific, you can write: A (rat unpleasant-person) scared Mary. Specify new names and gender Suppose you want to introduce a name, such as SuspectA , that START does not know about. Here is what you could do: Note that SuspectA is a name. SuspectA is a suspect. Generally, however, it is better to supply a gender. Otherwise the use of pronouns will not work, as in \u201cSuspectA killed himself;\u201d the problem is that if you do not supply gender, SuspectA will be neuter and START will not substitute SuspectA for himself. So, here is how you supply gender: Note that SuspectA is a masculine name. or Note that SuspectA is a feminine name.","title":"Classification"},{"location":"classification/#classification","text":"Genesis uses WordNet to get classification threads of entities.","title":"Classification"},{"location":"classification/#ordinary-classification","text":"If you want to associate a name with a single thread, write as follows: John is a person. The result is that John has just one thread: thing entity physical-entity object whole living-thing organism person name john Note that the final element in the thread is the name of the entity; the penultimate element is a marker that signals a name. This convention is exploited by the matcher. On the other hand, if you want a name to have an additional thread, you write: John is also a criminal. The result is that John has an added thread: thing entity physical-entity object whole living-thing organism person name john thing entity physical-entity object whole living-thing organism person bad-person wrongdoer principal criminal name john Again, note that the final elements in the threads are the name of the entity; the penultimate element is a marker that signals a name. Finally, maybe you want to define a class not in wordnet: A bouvier is a kind of dog. The result is: thing entity physical-entity object whole living-thing organism animal chordate vertebrate mammal placental carnivore canine dog bouvier Note that there is no name marker.","title":"Ordinary classification"},{"location":"classification/#assert-classification","text":"Sometimes you will want to specify a complete thread for a word or phrase. This first come up in persuasive story telling when Sila Sayan wanted to declare many properties that make someone likable or unlikable. Assert thread thing, likable, good parent. Assert thread thing, likable, caring. It also became useful to be able to specify opposites: Likable is the opposite of unlikable.","title":"Assert classification"},{"location":"classification/#specify-classification","text":"Suppose you say: A rat scared Mary. Alas, wordnet supplies five meanings for rat, three of which are subclasses of people. To order Genesis to limit itself to the three, you can use the following convention: A (rat person) scared Mary. And if you really want to be specific, you can write: A (rat unpleasant-person) scared Mary.","title":"Specify classification."},{"location":"classification/#specify-new-names-and-gender","text":"Suppose you want to introduce a name, such as SuspectA , that START does not know about. Here is what you could do: Note that SuspectA is a name. SuspectA is a suspect. Generally, however, it is better to supply a gender. Otherwise the use of pronouns will not work, as in \u201cSuspectA killed himself;\u201d the problem is that if you do not supply gender, SuspectA will be neuter and START will not substitute SuspectA for himself. So, here is how you supply gender: Note that SuspectA is a masculine name. or Note that SuspectA is a feminine name.","title":"Specify new names and gender"},{"location":"commentary/","text":"How to use the Commentary Panel The Commenary Panel When developing a new capability, you will often want to look at commentary. Yes, you can print to the sonsole, and should, using the Mark.say mechanism while debugging. Later, however, you will want to show off your miracles, so you should use the Commentary panel. Suppose, for example, you are working on the QuestionExpert and you want to write to the Commentary panel. The first thing you do is connect a port, say COMMENTARY , on the QuestionExpert box to theCommentarypanel. Thus, the following line will appear in theQuestionExpert: public static final String COMMENTARY = \"commentary\"; Then, in your private copy of Genesis or, if your work has graduated out of your private package into the system, the following lines will be somewhere in GenesisPlugBoarLower : Connections.wire(QuestionExpert.COMMENTARY, getQuestionExpert(), getCommentaryContainer()); Next, you put statements into your QuestionExpert box to transmit information to the Commentary panel. The information is packaged in aBetterSignalwrapper that includes the name of a tab and the message to be printed: String tab = \"Test\"; String message = \"Hello World\"; BetterSignal signal = new BetterSignal(tab, message); Connections.getPorts(this).transmit(QuestionExpert.COMMENTARY, signal); You can use the buttons labeled with three vertical bars in the GUI windows to select the Commentary panel for display. Optionally, you may want to cause the Commentary panel to appear programmatically. If so, you include an argument in the BetterSignal that says where the panel should appear. You have three choices: GenesisConstants.LEFT , GenesisConstants.RIGHT , and GenesisConstants.BOTTOM . String tab = \"Test\"; String message = \"Hello World\"; BetterSignal signal = new BetterSignal(GenesisContants.RIGHT, tab, message); Connections.getPorts(this).transmit(QuestionExpert.COMMENTARY, signal); You can also control what panels are displayed using a user-interface idiom in your stories; see the tutorial, \u201cHow to write stories.\u201d The Html formatting class The strings you write to the Commentary panel can contain HTML markup. To do the markup, you may find it convenient to use some syntactic sugaring methods in the Html class. For example, if you want part of your string to be bold, you could write: String message = \"Hello <b>wonderful</b> world\"; Alternatively you can write: String message = \"Hello\" + Html.bold(\"wonderful\") + \"world\"; Using theHtmlmethods is a big help when the messages get complex. This version is edited by Zhutian Yang, on 7 August 2019 An older version is authored by Patrick H. Winston, on December 23, 2014","title":"Using Commentary"},{"location":"commentary/#how-to-use-the-commentary-panel","text":"","title":"How to use the Commentary Panel"},{"location":"commentary/#the-commenary-panel","text":"When developing a new capability, you will often want to look at commentary. Yes, you can print to the sonsole, and should, using the Mark.say mechanism while debugging. Later, however, you will want to show off your miracles, so you should use the Commentary panel. Suppose, for example, you are working on the QuestionExpert and you want to write to the Commentary panel. The first thing you do is connect a port, say COMMENTARY , on the QuestionExpert box to theCommentarypanel. Thus, the following line will appear in theQuestionExpert: public static final String COMMENTARY = \"commentary\"; Then, in your private copy of Genesis or, if your work has graduated out of your private package into the system, the following lines will be somewhere in GenesisPlugBoarLower : Connections.wire(QuestionExpert.COMMENTARY, getQuestionExpert(), getCommentaryContainer()); Next, you put statements into your QuestionExpert box to transmit information to the Commentary panel. The information is packaged in aBetterSignalwrapper that includes the name of a tab and the message to be printed: String tab = \"Test\"; String message = \"Hello World\"; BetterSignal signal = new BetterSignal(tab, message); Connections.getPorts(this).transmit(QuestionExpert.COMMENTARY, signal); You can use the buttons labeled with three vertical bars in the GUI windows to select the Commentary panel for display. Optionally, you may want to cause the Commentary panel to appear programmatically. If so, you include an argument in the BetterSignal that says where the panel should appear. You have three choices: GenesisConstants.LEFT , GenesisConstants.RIGHT , and GenesisConstants.BOTTOM . String tab = \"Test\"; String message = \"Hello World\"; BetterSignal signal = new BetterSignal(GenesisContants.RIGHT, tab, message); Connections.getPorts(this).transmit(QuestionExpert.COMMENTARY, signal); You can also control what panels are displayed using a user-interface idiom in your stories; see the tutorial, \u201cHow to write stories.\u201d","title":"The Commenary Panel"},{"location":"commentary/#the-html-formatting-class","text":"The strings you write to the Commentary panel can contain HTML markup. To do the markup, you may find it convenient to use some syntactic sugaring methods in the Html class. For example, if you want part of your string to be bold, you could write: String message = \"Hello <b>wonderful</b> world\"; Alternatively you can write: String message = \"Hello\" + Html.bold(\"wonderful\") + \"world\"; Using theHtmlmethods is a big help when the messages get complex. This version is edited by Zhutian Yang, on 7 August 2019 An older version is authored by Patrick H. Winston, on December 23, 2014","title":"The Html formatting class"},{"location":"concept-net/","text":"Get Commonsense Rules from ConceptNet","title":"Commonsense - ConceptNet"},{"location":"concept-net/#get-commonsense-rules-from-conceptnet","text":"","title":"Get Commonsense Rules from ConceptNet"},{"location":"concept-patterns/","text":"Concept patterns Concept patterns usually include specifications for searches expressed as leads to expressions: Start experiment. xx, yy, and zz are persons. Macbeth, Macduff, and Duncan are persons. Start description of \"Revenge\". xx's harming yy leads to yy's harming xx. The end. if xx murders yy, then xx harms yy. if xx harms yy and zz is loyal to yy, then xx harms zz. if xx harms yy, then xx angers yy. if xx angers yy, then yy may kill xx. if xx kills yy, then yy becomes dead. if xx kills yy, then xx harms yy. // without this censor rule, there will be one more story element if xx becomes dead, then xx cannot be angered. Start story titled \"Macbeth\". Macbeth murders Duncan. Macduff is loyal to Duncan. Macduff kills Macbeth. The end. Note that a concept pattern looks like a story, except that the opening idiom, Start description of ... .is different from Start story titled ... . Theleads topart of the concept pattern says that the first event must be causally connected to the second event but there may be any number of causal links in between. For example, there are three causal links connecting Macbeth harms Macduff to Macduff harms Macbeth , as shown in figure below. You see that the Analysis line in the user interface indicates that Genesis has identified the Revenge pattern as a concept, even though the word revenge did not appear in the story. On the Genesis Interface > Elaboration graph > Concepts, you see that concept patterns are translated into sequences: Multiple leads-to expressions Concept patterns may have multiple leads-to expressions: Start description of \"Pyrrhic victory\". xx is an entity. zz is an entity. ll is an action. xx\u2019s wanting ll leads to xx\u2019s becoming happy. xx\u2019s wanting ll leads to zz\u2019s harming xx. The end. Ordinary relations and events This particular example also illustrates the incorporation of an unspecified action, ll . Concept patterns may also have ordinary relations and events that are not involved in leads-to relations. In the following, yy is an enemy of zz and I am a friend of yy are relations and yy helps xx is an event: Start description of \"Sell out\". xx is an entity. yy is a entity. zz is a entity. yy is an enemy of zz. yy helps xx. I am a friend of yy. zz\u2019s helping xx leads to xx\u2019s angering yy. The end. \"Consequently\" inserts elements When you want a concept pattern to insert an element into the story, use \"Consequently\": Start description of \"Revenge\". xx's harming yy leads to yy's harming xx. Consequently, yy is vicious. The end. Another example is handling Crow folktales, as xx has strong medicine is instantiated from pattern variables previously bound and inserted back into the story if the following concept is discovered. Start description of \"Violated belief - Medicine Man\". xx is a person. yy is a thing. xx transforms yy. Consequently, xx has strong medicine. The end. \"Notably\" triggers popup When you want a concept pattern to trigger a popup: Start description of \"Revenge\". xx's harming yy leads to yy's harming xx. Notably, yy is vicious. The end. You may have both a notably element and a consequenlty element in the same concept pattern. \"Not same as\" statements Finally, you can insist that two variables have different bindings using a must not equal expression. For example, you can insist that nothing can be involved in revenge against itself: Without the xx must not equal yy , suicide could be an act of revenge because, convolutedly, Lady Macbeth\u2019s suicide harms herself, which harms Macbeth, a relative, which harms Lady Macbeth, a relative, so harm leads to harm. This version is edited by Zhutian Yang, on 6 August 2019 An older version of How to speak Genesese is authored by Patrick H. Winston, on June 8, 2018","title":"Concept Patterns"},{"location":"concept-patterns/#concept-patterns","text":"Concept patterns usually include specifications for searches expressed as leads to expressions: Start experiment. xx, yy, and zz are persons. Macbeth, Macduff, and Duncan are persons. Start description of \"Revenge\". xx's harming yy leads to yy's harming xx. The end. if xx murders yy, then xx harms yy. if xx harms yy and zz is loyal to yy, then xx harms zz. if xx harms yy, then xx angers yy. if xx angers yy, then yy may kill xx. if xx kills yy, then yy becomes dead. if xx kills yy, then xx harms yy. // without this censor rule, there will be one more story element if xx becomes dead, then xx cannot be angered. Start story titled \"Macbeth\". Macbeth murders Duncan. Macduff is loyal to Duncan. Macduff kills Macbeth. The end. Note that a concept pattern looks like a story, except that the opening idiom, Start description of ... .is different from Start story titled ... . Theleads topart of the concept pattern says that the first event must be causally connected to the second event but there may be any number of causal links in between. For example, there are three causal links connecting Macbeth harms Macduff to Macduff harms Macbeth , as shown in figure below. You see that the Analysis line in the user interface indicates that Genesis has identified the Revenge pattern as a concept, even though the word revenge did not appear in the story. On the Genesis Interface > Elaboration graph > Concepts, you see that concept patterns are translated into sequences:","title":"Concept patterns"},{"location":"concept-patterns/#multiple-leads-to-expressions","text":"Concept patterns may have multiple leads-to expressions: Start description of \"Pyrrhic victory\". xx is an entity. zz is an entity. ll is an action. xx\u2019s wanting ll leads to xx\u2019s becoming happy. xx\u2019s wanting ll leads to zz\u2019s harming xx. The end.","title":"Multiple leads-to expressions"},{"location":"concept-patterns/#ordinary-relations-and-events","text":"This particular example also illustrates the incorporation of an unspecified action, ll . Concept patterns may also have ordinary relations and events that are not involved in leads-to relations. In the following, yy is an enemy of zz and I am a friend of yy are relations and yy helps xx is an event: Start description of \"Sell out\". xx is an entity. yy is a entity. zz is a entity. yy is an enemy of zz. yy helps xx. I am a friend of yy. zz\u2019s helping xx leads to xx\u2019s angering yy. The end.","title":"Ordinary relations and events"},{"location":"concept-patterns/#consequently-inserts-elements","text":"When you want a concept pattern to insert an element into the story, use \"Consequently\": Start description of \"Revenge\". xx's harming yy leads to yy's harming xx. Consequently, yy is vicious. The end. Another example is handling Crow folktales, as xx has strong medicine is instantiated from pattern variables previously bound and inserted back into the story if the following concept is discovered. Start description of \"Violated belief - Medicine Man\". xx is a person. yy is a thing. xx transforms yy. Consequently, xx has strong medicine. The end.","title":"\"Consequently\" inserts elements"},{"location":"concept-patterns/#notably-triggers-popup","text":"When you want a concept pattern to trigger a popup: Start description of \"Revenge\". xx's harming yy leads to yy's harming xx. Notably, yy is vicious. The end. You may have both a notably element and a consequenlty element in the same concept pattern.","title":"\"Notably\" triggers popup"},{"location":"concept-patterns/#not-same-as-statements","text":"Finally, you can insist that two variables have different bindings using a must not equal expression. For example, you can insist that nothing can be involved in revenge against itself: Without the xx must not equal yy , suicide could be an act of revenge because, convolutedly, Lady Macbeth\u2019s suicide harms herself, which harms Macbeth, a relative, which harms Lady Macbeth, a relative, so harm leads to harm. This version is edited by Zhutian Yang, on 6 August 2019 An older version of How to speak Genesese is authored by Patrick H. Winston, on June 8, 2018","title":"\"Not same as\" statements"},{"location":"conceptnet/","text":"ConceptNet Used in Genesis Ideas and demos from Bryan Michael Williams 2017 MEng thesis A Commonsense Approach to Story Understanding Commonsense reasoning Given a story as the following The United States is a country. Mexico is a country. The year is 1846. Manifest Destiny is popular in the United States. The United States has ambition, has greed, and wants to gain land. Mexico and the United States disagree over borders. The United States move into the disputed territory. Mexican forces attack the United States. The United States declares war on Mexico. Winfield Scott leads the United States army. The United States battles Mexico. The United States triumphs by capturing Mexico City. The United States defeats Mexico and wins the war. The Treaty of Guadalupe Hidalgo officially ends the war. ... Genesis can answer questions such as: Note that Genesis answers the first question with two story elements which were never explicitly stated, but which were inferred from common sense. The second and third questions ask Genesis about these inferences, and it backs them up with explicit story elements. ConceptNet ConceptNet 4 contains about 22,000 English concepts connected in approximately 225,000 assertions and uses 27 relations. Some common relations are \u201cIs A,\u201d \u201cUsed For,\u201d \u201cCauses,\u201d \u201cDesires,\u201d \u201cAt Location,\u201d and \u201cHas Property.\" If multiple users submitted the same assertion, the score for that assertion increased (or decreased, if the assertion is negative) to represent the increased confidence. Users could also rate previously submitted assertions, and these ratings influenced the scores of the assertions (Havasi et al., 2009). AnalogySpace was created by Havasi et al. to address the space sparsity problem by generating knowledge based on existing knowledge. ConceptNet can be thought of as a three-dimensional matrix of assertions where the dimensions are the left concept, the relation, and the right concept. The value in each matrix entry is the score of that assertion, or zero if that assertion is not present. This matrix is very sparse, but singular value decomposition (SVM) can be used to fill in many of its gaps. SVM creates a transfer of information between similar concepts. For example, if the original knowledge base knows that apples and oranges have many of the same properties, but only knows that apples are used for juice, AnalogySpace has evidence that oranges are also used for juice Genesis get ConceptNet assertions through queries: Genesis Uses Similar Assertions If the event were \u201cMatt eats an apple,\u201d Genesis would also be able to infer that Matt is full because it consults WordNet when processing every entity in the story, and WordNet tells it that an apple is a type of food (along with it being an instance of produce, an editable fruit, a solid, etc.) Genesis also uses Similarity in ConceptNet 4 to enable more rules to fire and Relatedness in ConceptNet 5. CSERM is an extension of Genesis\u2019s normal rule matching which uses WordNet. The job of CSERM is to determine if two Genesis entities, one of which is a rule, are similar enough that the rule should fire. ConceptNet can tell Genesis that \u201cattack\u201d is similar to \u201charm\u201d so that if there are rules that discuss harming, story events that contain attacking can still trigger these rules. ConceptNet knows that words such as \"deceive,\" \"threaten,\" \"rob,\" \"anger,\" \"attack,\" \"torture,\" \"dishonor,\" \"murder,\" and \"embarrass\" are all similar to \"harm,\" and a thesaurus does not. Connections made with the help of ConceptNet are dotted: The justification for the similarity match is shown in source , explains why Genesis believes Josh embarrassing Matt causes Matt to stop bothering Josh: CSERM has two important limitations: it can introduce a significant slowdown on stories with large rulesets, and it relies on a cutoff value to determine how high a similarity score must be for two concepts to be treated as similar. Genesis Understands Desires, Goals, and Actions Enabling Genesis to better understand goals, their causes, and actions taken towards completing them improves Genesis's comprehension of goal-oriented stories. With ASPIRE and ConceptNet, Genesis can much more completely identify the causal relationships between the story\u2019s events with far less user effort. The relations \"Causes Desire,\" \"Motivated By Goal,\" \"Used For,\" and \"Has Subevent\" are all particularly relevant to the goal domain. Of the approximately 225,000 assertions ConceptNet 4 contains, around 20,000 of these are relevant to the goal information ASPIRE requests. ASPIRE maintains a list of candidate character goals as Genesis sequentially reads the story, adding to the list when it detects that a story event might cause a character in the story to have a goal or contribute to any existing ones. To query ConceptNet, ASPIRE forms the feature \u201cgain weight Causes Desire ____\u201d and uses ConceptNetClient to get a list of scored ConceptNet assertions that complete this feature. In this case, ConceptNet knows that gaining weight causes the desire of exercising, so the returned list contains the assertion \u201cgain weight Causes Desire exercise\u201d among other relevant assertions. Therefore, ASPIRE adds the candidate character goal \u201cSean wants to exercise\u201d to its list and continues reading the story. the candidate character goal \u201cSean wants to exercise\u201d is just an idea Genesis is holding in the back of its mind until it sees evidence supporting it. When processing the event \u201cSean rides his bike to work,\u201d ASPIRE extracts the concept \u201cride bike\u201d from the event, \u201cexercise\u201d from the candidate character goal, and uses ConceptNetClient to obtain the scores for the assertions \u201cride bike Motivated By Goal exercise,\u201d \u201cride bike Used For exercise,\u201d and \u201cexercise Has Subevent ride bike.\u201d If ConceptNet confirms any of these assertions, ASPIRE concludes that the event contributes to the candidate character goal; If ASPIRE concludes that a story event contributes to a candidate character goal, Genesis forms causal connections and adds new inferred events to the story based on ASPIRE\u2019s analysis: Another goal-oriented story: The justifications: The equivalent Genesis Rules: Without ASPIRE or any ConceptNet knowledge, Genesis would form zero causal connections and therefore couldn\u2019t answer any \u201cWhy\u201d or \u201cHow\u201d questions about the story. The cutoff value is 0.3 for ASPIRE, a value which I have experimentally found to produce satisfactory results Demo: Common sense knowledge Commonsense reasoning is different from logical reasoning. As logical reasoning would combine the true assertions \"volleyball Is A sport\" and \"sport At Location field,\" which is rarely true because volleyball is usually played indoors or on a beach. Commonsense reasoning is also not statistical. The score for \"sport At Location field\" is not determined by dividing the number of sports, as such an approach ignores context dependency. Instead, ConceptNet embraces the very nature of common sense--assertions can be ambiguous, contradictory, or context-dependent. Limitations ConceptNet only describes binary relationships, while Genesis rules can contain and unbounded number of consequents and antecedents.","title":"ConceptNet Used in Genesis"},{"location":"conceptnet/#conceptnet-used-in-genesis","text":"Ideas and demos from Bryan Michael Williams 2017 MEng thesis A Commonsense Approach to Story Understanding","title":"ConceptNet Used in Genesis"},{"location":"conceptnet/#commonsense-reasoning","text":"Given a story as the following The United States is a country. Mexico is a country. The year is 1846. Manifest Destiny is popular in the United States. The United States has ambition, has greed, and wants to gain land. Mexico and the United States disagree over borders. The United States move into the disputed territory. Mexican forces attack the United States. The United States declares war on Mexico. Winfield Scott leads the United States army. The United States battles Mexico. The United States triumphs by capturing Mexico City. The United States defeats Mexico and wins the war. The Treaty of Guadalupe Hidalgo officially ends the war. ... Genesis can answer questions such as: Note that Genesis answers the first question with two story elements which were never explicitly stated, but which were inferred from common sense. The second and third questions ask Genesis about these inferences, and it backs them up with explicit story elements.","title":"Commonsense reasoning"},{"location":"conceptnet/#conceptnet","text":"ConceptNet 4 contains about 22,000 English concepts connected in approximately 225,000 assertions and uses 27 relations. Some common relations are \u201cIs A,\u201d \u201cUsed For,\u201d \u201cCauses,\u201d \u201cDesires,\u201d \u201cAt Location,\u201d and \u201cHas Property.\" If multiple users submitted the same assertion, the score for that assertion increased (or decreased, if the assertion is negative) to represent the increased confidence. Users could also rate previously submitted assertions, and these ratings influenced the scores of the assertions (Havasi et al., 2009). AnalogySpace was created by Havasi et al. to address the space sparsity problem by generating knowledge based on existing knowledge. ConceptNet can be thought of as a three-dimensional matrix of assertions where the dimensions are the left concept, the relation, and the right concept. The value in each matrix entry is the score of that assertion, or zero if that assertion is not present. This matrix is very sparse, but singular value decomposition (SVM) can be used to fill in many of its gaps. SVM creates a transfer of information between similar concepts. For example, if the original knowledge base knows that apples and oranges have many of the same properties, but only knows that apples are used for juice, AnalogySpace has evidence that oranges are also used for juice Genesis get ConceptNet assertions through queries:","title":"ConceptNet"},{"location":"conceptnet/#genesis-uses-similar-assertions","text":"If the event were \u201cMatt eats an apple,\u201d Genesis would also be able to infer that Matt is full because it consults WordNet when processing every entity in the story, and WordNet tells it that an apple is a type of food (along with it being an instance of produce, an editable fruit, a solid, etc.) Genesis also uses Similarity in ConceptNet 4 to enable more rules to fire and Relatedness in ConceptNet 5. CSERM is an extension of Genesis\u2019s normal rule matching which uses WordNet. The job of CSERM is to determine if two Genesis entities, one of which is a rule, are similar enough that the rule should fire. ConceptNet can tell Genesis that \u201cattack\u201d is similar to \u201charm\u201d so that if there are rules that discuss harming, story events that contain attacking can still trigger these rules. ConceptNet knows that words such as \"deceive,\" \"threaten,\" \"rob,\" \"anger,\" \"attack,\" \"torture,\" \"dishonor,\" \"murder,\" and \"embarrass\" are all similar to \"harm,\" and a thesaurus does not. Connections made with the help of ConceptNet are dotted: The justification for the similarity match is shown in source , explains why Genesis believes Josh embarrassing Matt causes Matt to stop bothering Josh: CSERM has two important limitations: it can introduce a significant slowdown on stories with large rulesets, and it relies on a cutoff value to determine how high a similarity score must be for two concepts to be treated as similar.","title":"Genesis Uses Similar Assertions"},{"location":"conceptnet/#genesis-understands-desires-goals-and-actions","text":"Enabling Genesis to better understand goals, their causes, and actions taken towards completing them improves Genesis's comprehension of goal-oriented stories. With ASPIRE and ConceptNet, Genesis can much more completely identify the causal relationships between the story\u2019s events with far less user effort. The relations \"Causes Desire,\" \"Motivated By Goal,\" \"Used For,\" and \"Has Subevent\" are all particularly relevant to the goal domain. Of the approximately 225,000 assertions ConceptNet 4 contains, around 20,000 of these are relevant to the goal information ASPIRE requests. ASPIRE maintains a list of candidate character goals as Genesis sequentially reads the story, adding to the list when it detects that a story event might cause a character in the story to have a goal or contribute to any existing ones. To query ConceptNet, ASPIRE forms the feature \u201cgain weight Causes Desire ____\u201d and uses ConceptNetClient to get a list of scored ConceptNet assertions that complete this feature. In this case, ConceptNet knows that gaining weight causes the desire of exercising, so the returned list contains the assertion \u201cgain weight Causes Desire exercise\u201d among other relevant assertions. Therefore, ASPIRE adds the candidate character goal \u201cSean wants to exercise\u201d to its list and continues reading the story. the candidate character goal \u201cSean wants to exercise\u201d is just an idea Genesis is holding in the back of its mind until it sees evidence supporting it. When processing the event \u201cSean rides his bike to work,\u201d ASPIRE extracts the concept \u201cride bike\u201d from the event, \u201cexercise\u201d from the candidate character goal, and uses ConceptNetClient to obtain the scores for the assertions \u201cride bike Motivated By Goal exercise,\u201d \u201cride bike Used For exercise,\u201d and \u201cexercise Has Subevent ride bike.\u201d If ConceptNet confirms any of these assertions, ASPIRE concludes that the event contributes to the candidate character goal; If ASPIRE concludes that a story event contributes to a candidate character goal, Genesis forms causal connections and adds new inferred events to the story based on ASPIRE\u2019s analysis: Another goal-oriented story: The justifications: The equivalent Genesis Rules: Without ASPIRE or any ConceptNet knowledge, Genesis would form zero causal connections and therefore couldn\u2019t answer any \u201cWhy\u201d or \u201cHow\u201d questions about the story. The cutoff value is 0.3 for ASPIRE, a value which I have experimentally found to produce satisfactory results","title":"Genesis Understands Desires, Goals, and Actions"},{"location":"conceptnet/#demo","text":"","title":"Demo:"},{"location":"conceptnet/#common-sense-knowledge","text":"Commonsense reasoning is different from logical reasoning. As logical reasoning would combine the true assertions \"volleyball Is A sport\" and \"sport At Location field,\" which is rarely true because volleyball is usually played indoors or on a beach. Commonsense reasoning is also not statistical. The score for \"sport At Location field\" is not determined by dividing the number of sports, as such an approach ignores context dependency. Instead, ConceptNet embraces the very nature of common sense--assertions can be ambiguous, contradictory, or context-dependent.","title":"Common sense knowledge"},{"location":"conceptnet/#limitations","text":"ConceptNet only describes binary relationships, while Genesis rules can contain and unbounded number of consequents and antecedents.","title":"Limitations"},{"location":"contribute/","text":"Contribute to Documentation Step 1: Clone Project Please send me your GitHub email address so that I can add you to the Genesis Docs project as a collaborator. After I have replied you, open terminal and go to your work directory (e.g., ~/Documents). Then clone the project and go to the project folder: $ git clone git@github.com:ztyang-mit/genesis-doc.git Here is the layout of the project: mkdocs.yml # The configuration file, e.g., for organizing the pages docs/ index.md # The documentation homepage ... # Other markdown pages imgs/ ... # Images css/ extra.css # style file to customize based on site/theme.css and site/theme_extra.css site/ # You can ignore thing here, MkDocs generNates them when you deploy the page Step 2: Install MkDocs MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can install MkDocs using pip or other package manager. Install with pip If you use the Python package manager, pip , then you can: $ pip install --upgrade pip $ pip install mkdocs To check that it is installed: $ mkdocs --version mkdocs, version 1.0.4 Install with a Package Manager If you prefer useing another package manager (such as apt-get , dnf , homebrew , yum , chocolatey , etc.) to install packages on your system, then you may install MkDocs with your package manager. Step 3: Start MkDocs Server MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes ... The command will open up http://127.0.0.1:8000/ in your browser, and you'll see the home page being displayed: Step 4: Edit Pages Before you make changes to the project, make sure to git pull the latest changes made by other to avoid conflict. When you save changes to the project, http://127.0.0.1:8000/ will automatically update. Add a page If you want to add a page to the wiki, reate a new markdown file in the docs/ directory. Then, add its name and markdown file name to mkdocs.yml , where you will see: nav: - Genesis: - Genesis System: index.md - Contribute to Documentation: mkdocs.md - Representation: - Inner Language - Innerese: innerese.md - ... - Fundamentals: - Inference by Rules: inference.md - ... - The current hierarchy and order is designed so that a new student can use the documentation as a tutorial. Please feel free to make changes. Major reorganization is possible upon discussion among the collaborators: Zhutian Yang: ztyang@mit.edu Michael Fleder: mfleder@mit.edu Write a page Our wiki pages are written in Markdown , a lightweight markup language with plain text formatting syntax. The following cheatsheet designed by Theme Spectre showed the most frequently used syntax: To make it even easier to write in Markdown, you can add Markdown plugin to your editor. For example, I use markdown-editor in Atom to enjoy the following features: Toggle text styles using shortcut such as Ctrl+B Continue lists and table rows when press enter Correct ordered list numbers Step 5: Deploy After Editting Before you deploy for the first time When you deploy, the html pages will be generated into the site/ directory. One thing annoying is that such a footer will also be automatically generated onto every page: The solution is to change the MkDocs python package footer file. To find out the location of the package, check the version of MkDocs in commandline: $ mkdocs --version mkdocs, version 1.0.4 from /miniconda3/lib/python3.7/site-packages/mkdocs (Python 3.7) In mkdocs/themes/readthedocs/footer.html , change the following lines: Built with <a href=\"http://www.mkdocs.org\">MkDocs</a> using a <a href=\"https://github.com/snide/sphinx_rtd_theme\">theme</a> provided by <a href=\"https://readthedocs.org\">Read the Docs</a>. into our own footer: Maintained by the Gensis Group, Computer Science and Artificial Intelligence Lab, MIT. <br> Any questions? Contact Yang at <a href=\"mailto:ztyang@mit.edu\">ztyang@mit.edu</a> or Dylan at <a href=\"mailto:dxh@mit.edu\">dxh@mit.edu</a> Routine deploy with one command Currently, the wiki page is hosted on GitHub. We will later shift over to private domains. After you have made the changes, simply do this in the same directory as the mkdocs.yml file: mkdocs gh-deploy --clean The page will be updated on https://ztyang-mit.github.io/genesis-doc/ . A short url that directs to the page is bit.ly/genesis-docs . Note that you don't have to git push . The deploy command does it for you. Style Guide To make the pages easier to read, Yang tries to follow a few style rules: Write short paragraphs Include examples for each topic Include screenshots for each example Include a summary for each page Use inline code style for objects in java code, such as class names, e.g., the Translator class function names, e.g., Mark.say() frame names, e.g., John and with input sentence, e.g., John killed Mary Summary In this article, you have learned how to install the MkDocs package, write documentation pages, and deloy the site. Every time you work on the project, you need to use two commands at the project directory. $ mkdocs serve # before editting, start the MkDocs server $ mkdocs gh-deploy --clean # after editting, deploy the site During editting, you add and organize pages at the configuration page, mkdocs.yml . You write pages using Markdown, which makes it easy to style text, add links, codes, and images. You may follow or revise the Style Guide to make the documentation easier to read.","title":"Contribute to Documentation"},{"location":"contribute/#contribute-to-documentation","text":"","title":"Contribute to Documentation"},{"location":"contribute/#step-1-clone-project","text":"Please send me your GitHub email address so that I can add you to the Genesis Docs project as a collaborator. After I have replied you, open terminal and go to your work directory (e.g., ~/Documents). Then clone the project and go to the project folder: $ git clone git@github.com:ztyang-mit/genesis-doc.git Here is the layout of the project: mkdocs.yml # The configuration file, e.g., for organizing the pages docs/ index.md # The documentation homepage ... # Other markdown pages imgs/ ... # Images css/ extra.css # style file to customize based on site/theme.css and site/theme_extra.css site/ # You can ignore thing here, MkDocs generNates them when you deploy the page","title":"Step 1: Clone Project"},{"location":"contribute/#step-2-install-mkdocs","text":"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can install MkDocs using pip or other package manager.","title":"Step 2: Install MkDocs"},{"location":"contribute/#install-with-pip","text":"If you use the Python package manager, pip , then you can: $ pip install --upgrade pip $ pip install mkdocs To check that it is installed: $ mkdocs --version mkdocs, version 1.0.4","title":"Install with pip"},{"location":"contribute/#install-with-a-package-manager","text":"If you prefer useing another package manager (such as apt-get , dnf , homebrew , yum , chocolatey , etc.) to install packages on your system, then you may install MkDocs with your package manager.","title":"Install with a Package Manager"},{"location":"contribute/#step-3-start-mkdocs-server","text":"MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes ... The command will open up http://127.0.0.1:8000/ in your browser, and you'll see the home page being displayed:","title":"Step 3: Start MkDocs Server"},{"location":"contribute/#step-4-edit-pages","text":"Before you make changes to the project, make sure to git pull the latest changes made by other to avoid conflict. When you save changes to the project, http://127.0.0.1:8000/ will automatically update.","title":"Step 4: Edit Pages"},{"location":"contribute/#add-a-page","text":"If you want to add a page to the wiki, reate a new markdown file in the docs/ directory. Then, add its name and markdown file name to mkdocs.yml , where you will see: nav: - Genesis: - Genesis System: index.md - Contribute to Documentation: mkdocs.md - Representation: - Inner Language - Innerese: innerese.md - ... - Fundamentals: - Inference by Rules: inference.md - ... - The current hierarchy and order is designed so that a new student can use the documentation as a tutorial. Please feel free to make changes. Major reorganization is possible upon discussion among the collaborators: Zhutian Yang: ztyang@mit.edu Michael Fleder: mfleder@mit.edu","title":"Add a page"},{"location":"contribute/#write-a-page","text":"Our wiki pages are written in Markdown , a lightweight markup language with plain text formatting syntax. The following cheatsheet designed by Theme Spectre showed the most frequently used syntax: To make it even easier to write in Markdown, you can add Markdown plugin to your editor. For example, I use markdown-editor in Atom to enjoy the following features: Toggle text styles using shortcut such as Ctrl+B Continue lists and table rows when press enter Correct ordered list numbers","title":"Write a page"},{"location":"contribute/#step-5-deploy-after-editting","text":"","title":"Step 5: Deploy After Editting"},{"location":"contribute/#before-you-deploy-for-the-first-time","text":"When you deploy, the html pages will be generated into the site/ directory. One thing annoying is that such a footer will also be automatically generated onto every page: The solution is to change the MkDocs python package footer file. To find out the location of the package, check the version of MkDocs in commandline: $ mkdocs --version mkdocs, version 1.0.4 from /miniconda3/lib/python3.7/site-packages/mkdocs (Python 3.7) In mkdocs/themes/readthedocs/footer.html , change the following lines: Built with <a href=\"http://www.mkdocs.org\">MkDocs</a> using a <a href=\"https://github.com/snide/sphinx_rtd_theme\">theme</a> provided by <a href=\"https://readthedocs.org\">Read the Docs</a>. into our own footer: Maintained by the Gensis Group, Computer Science and Artificial Intelligence Lab, MIT. <br> Any questions? Contact Yang at <a href=\"mailto:ztyang@mit.edu\">ztyang@mit.edu</a> or Dylan at <a href=\"mailto:dxh@mit.edu\">dxh@mit.edu</a>","title":"Before you deploy for the first time"},{"location":"contribute/#routine-deploy-with-one-command","text":"Currently, the wiki page is hosted on GitHub. We will later shift over to private domains. After you have made the changes, simply do this in the same directory as the mkdocs.yml file: mkdocs gh-deploy --clean The page will be updated on https://ztyang-mit.github.io/genesis-doc/ . A short url that directs to the page is bit.ly/genesis-docs . Note that you don't have to git push . The deploy command does it for you.","title":"Routine deploy with one command"},{"location":"contribute/#style-guide","text":"To make the pages easier to read, Yang tries to follow a few style rules: Write short paragraphs Include examples for each topic Include screenshots for each example Include a summary for each page Use inline code style for objects in java code, such as class names, e.g., the Translator class function names, e.g., Mark.say() frame names, e.g., John and with input sentence, e.g., John killed Mary","title":"Style Guide"},{"location":"contribute/#summary","text":"In this article, you have learned how to install the MkDocs package, write documentation pages, and deloy the site. Every time you work on the project, you need to use two commands at the project directory. $ mkdocs serve # before editting, start the MkDocs server $ mkdocs gh-deploy --clean # after editting, deploy the site During editting, you add and organize pages at the configuration page, mkdocs.yml . You write pages using Markdown, which makes it easy to style text, add links, codes, and images. You may follow or revise the Style Guide to make the documentation easier to read.","title":"Summary"},{"location":"core/","text":"Genesis Core The Genesis Core is a trigger-response system. It enables Genesis to summon its mental experts to solve the problems posted by the environment, a human, or its own introspection process. The trigger is any text input into Genesis system. It can be an instruction, a question, or a story. It's similar to the streams of information acquired by our perception system. The response is the sequence of information flow within and among selected Genesis Mental Experts that are associated with the trigger. The association between the trigger and response can be learned and modified through experience. Trigger Response Note Genesis reads one story that has a similar pattern as another story Generate concept patterns, inference rules, or procedural knowledge At any time, Genesis may have several active Mental Experts running for acquiring knowledge, inspecting moral behavior, or documenting its day Human asks questions about stories Depending on the type of questions asked, process the story with different mental experts The type of a question can be detected by keywords such as \"What if\" (hypothetical reasoning), \"Summarize\" (story summary), and \"Compare\" (story similarity) Human asks Genesis to perform some tests Depending on the domain of task instructed, decompose the tasks with different sets of domain knowledge The domain of task can be determined by the objects or goals involved. Common domains include robot assembly, web browsing, memory manipulation, and graphic design Input from Perception Interfaces Genesis perception interfaces pass the output of perception systems to Genesis Core for reasoning. On the Genesis System Interface, each perception interface takes the form of a text input box for easier testing. The following perception systems may be integrated. Perception System Input Example Speech Recognition Chatting inputs from human actors. Alice started speaking. I am hungry. Do you know where is the cook book written by Bob? Visual Recognition Objective descriptions of the world and human actors. The input may come from a combination of vision systems, such as by Attribute detector , Relation detector , Face detector , and Action detector . Alice walked into the room. She wears a white shirt. She stopped besides the book shelf Text Recognition Texts from a variety of sources, e.g., stories, articles, contents on webpages. The input may come from a corpora or a web scrapper. Alice went into wonderland ...","title":"Genesis Core"},{"location":"core/#genesis-core","text":"The Genesis Core is a trigger-response system. It enables Genesis to summon its mental experts to solve the problems posted by the environment, a human, or its own introspection process. The trigger is any text input into Genesis system. It can be an instruction, a question, or a story. It's similar to the streams of information acquired by our perception system. The response is the sequence of information flow within and among selected Genesis Mental Experts that are associated with the trigger. The association between the trigger and response can be learned and modified through experience. Trigger Response Note Genesis reads one story that has a similar pattern as another story Generate concept patterns, inference rules, or procedural knowledge At any time, Genesis may have several active Mental Experts running for acquiring knowledge, inspecting moral behavior, or documenting its day Human asks questions about stories Depending on the type of questions asked, process the story with different mental experts The type of a question can be detected by keywords such as \"What if\" (hypothetical reasoning), \"Summarize\" (story summary), and \"Compare\" (story similarity) Human asks Genesis to perform some tests Depending on the domain of task instructed, decompose the tasks with different sets of domain knowledge The domain of task can be determined by the objects or goals involved. Common domains include robot assembly, web browsing, memory manipulation, and graphic design","title":"Genesis Core"},{"location":"core/#input-from-perception-interfaces","text":"Genesis perception interfaces pass the output of perception systems to Genesis Core for reasoning. On the Genesis System Interface, each perception interface takes the form of a text input box for easier testing. The following perception systems may be integrated. Perception System Input Example Speech Recognition Chatting inputs from human actors. Alice started speaking. I am hungry. Do you know where is the cook book written by Bob? Visual Recognition Objective descriptions of the world and human actors. The input may come from a combination of vision systems, such as by Attribute detector , Relation detector , Face detector , and Action detector . Alice walked into the room. She wears a white shirt. She stopped besides the book shelf Text Recognition Texts from a variety of sources, e.g., stories, articles, contents on webpages. The input may come from a corpora or a web scrapper. Alice went into wonderland ...","title":"Input from Perception Interfaces"},{"location":"demo-macbeth2/","text":"Demo: Culture Difference in Interpreting Macbeth In this demo, Genesis uses two sets of common sense rules and concept patterns to read a short, simple version of Macbeth\u2014about 100 lines\u2014and constructs two elaboration graphs. The elaboration graph on the left reflects the Asian bias toward viewing violence situationally, that is, as a consequence of situations in which the actors are immersed. The elaboration graph on the right reflects the Western bias toward viewing violence dispositionally, that is, as a consequence of actor characteristics. The causal graphs constructed also have different shapes: The demonstration also illustrates how Genesis answers why questions (on the common sense and the conceptual level) and how questions (by reporting on the steps involved). Click or right click to zoom in or out on the elaboration graph. Press and drag to move the elaboration graph. Press Revenge button at the bottom of the left elaboration graph and examine the elements involved in the Inspector pane. You see that Macduff kills Macbeth is situational. Press the Insane violence buttons on the right until you find the concept pattern in which Macduff kills Macbeth. On this side, you see that the killing is dispositional. The story files Here is corpora/stories/Shakespeare/Macbeth2.txt Start experiment. # clears away text boxes and memory from previous experiment Set all switches to defaults. # TODO: What are the default switches Set concept switch to false. Set show text box switch to false. Set show all story elements switch to false. Set right panel to mental models. Set bottom panel to elaboration graph. Insert file Macbeth2 common. /* Insert question into text box: Why did Macduff kill Macbeth? Insert question into text box: How did Macbeth murder Duncan? */ Here is corpora/stories/Shakespeare/Macbeth2 common.txt Both perspectives. Show both perspectives. Insert file Common commonsense knowledge. Insert file General reflective knowledge. First perspective. \"Eastern\" is a kind of personality trait. \"Machiavellian\" is a kind of personality trait. Second perspective. \"Western\" is a kind of personality trait. Both perspectives. First perspective. Start story titled \"Macbeth/Eastern\". I am eastern. I am machiavellian. Second perspective. Start story titled \"Macbeth/Western\". I am western. Both Perspectives. Insert file Macbeth plot. Here is the Machiavellian mental model: WW, XX, YY, and ZZ are persons. Patrick is a person. If XX is an enemy of ZZ and YY is an enemy of ZZ, then XX may be a friend of YY. If XX is an enemy of ZZ and YY is an enemy of ZZ, then YY may be a friend of XX. Start story titled \"Machiavellian person's characteristics\". Patrick protects himself. The end. Here is the eastern mental model: WW, XX, YY, and ZZ are persons. YY may kill WW because YY wants to kill WW. // TODO: What is this!? If value of variable test-expert-request is false: XX may kill YY because YY angers XX. If value of variable test-expert-request is false: YY may murder WW because YY wants to become king and because WW is the king and because YY is WW's successor. Start description of \"Revenge\". xx is an entity. yy is a entity. xx's harming yy leads to yy's harming xx. The end. Start story titled \"Eastern person's characteristics\". The end. Here is the western mental model: XX and YY are entities. If XX is American and XX becomes angry, then XX becomes violent. If XX becomes violent, then XX may kill YY. If XX kills YY then XX must not be sane. Start description of \"Insane violence\". XX's not being sane leads to XX 's killing YY. The end. Start story titled \"Western person's characteristics\". The end. Why can't there be three or more perspectives? How about I put text and configurations in different slots of json so that I can put in descriptions of scenes and characters. I can put all contents in one file so it's easier to control. See Local knowledge base for Genesis's local knowledge base. Here is corpora/stories/Shakespeare/Macbeth plot.txt Insert file Macbeth preface. Scotland and England are countries. Dunsinane is a castle and Birnam Wood is a forest. Macbeth, Macduff, Malcolm, Donalbain, Lady Macbeth, Lady Macduff, Cawdor, and Duncan are persons. Lady Macbeth is Macbeth's wife. Lady Macbeth is evil and greedy. Duncan is the king, and Macbeth is Duncan's successor. Duncan is an enemy of Cawdor. Macbeth is brave. ... The end. Here is corpora/stories/Shakespeare/Macbeth preface.txt Note that Cawdor is a name. Note that Duncan is a name. Note that Lady Macbeth is a feminine name. Note that Lady Macduff is a feminine name. Note that Macduff is a name. Note that Macbeth is a name. Note that Malcolm is a name. Note that Donalbain is a name. Note that Dunsinane is a name. Note that Birnam Wood is a name.","title":"Culture Differences"},{"location":"demo-macbeth2/#demo-culture-difference-in-interpreting-macbeth","text":"In this demo, Genesis uses two sets of common sense rules and concept patterns to read a short, simple version of Macbeth\u2014about 100 lines\u2014and constructs two elaboration graphs. The elaboration graph on the left reflects the Asian bias toward viewing violence situationally, that is, as a consequence of situations in which the actors are immersed. The elaboration graph on the right reflects the Western bias toward viewing violence dispositionally, that is, as a consequence of actor characteristics. The causal graphs constructed also have different shapes: The demonstration also illustrates how Genesis answers why questions (on the common sense and the conceptual level) and how questions (by reporting on the steps involved). Click or right click to zoom in or out on the elaboration graph. Press and drag to move the elaboration graph. Press Revenge button at the bottom of the left elaboration graph and examine the elements involved in the Inspector pane. You see that Macduff kills Macbeth is situational. Press the Insane violence buttons on the right until you find the concept pattern in which Macduff kills Macbeth. On this side, you see that the killing is dispositional.","title":"Demo: Culture Difference in Interpreting Macbeth"},{"location":"demo-macbeth2/#the-story-files","text":"Here is corpora/stories/Shakespeare/Macbeth2.txt Start experiment. # clears away text boxes and memory from previous experiment Set all switches to defaults. # TODO: What are the default switches Set concept switch to false. Set show text box switch to false. Set show all story elements switch to false. Set right panel to mental models. Set bottom panel to elaboration graph. Insert file Macbeth2 common. /* Insert question into text box: Why did Macduff kill Macbeth? Insert question into text box: How did Macbeth murder Duncan? */ Here is corpora/stories/Shakespeare/Macbeth2 common.txt Both perspectives. Show both perspectives. Insert file Common commonsense knowledge. Insert file General reflective knowledge. First perspective. \"Eastern\" is a kind of personality trait. \"Machiavellian\" is a kind of personality trait. Second perspective. \"Western\" is a kind of personality trait. Both perspectives. First perspective. Start story titled \"Macbeth/Eastern\". I am eastern. I am machiavellian. Second perspective. Start story titled \"Macbeth/Western\". I am western. Both Perspectives. Insert file Macbeth plot. Here is the Machiavellian mental model: WW, XX, YY, and ZZ are persons. Patrick is a person. If XX is an enemy of ZZ and YY is an enemy of ZZ, then XX may be a friend of YY. If XX is an enemy of ZZ and YY is an enemy of ZZ, then YY may be a friend of XX. Start story titled \"Machiavellian person's characteristics\". Patrick protects himself. The end. Here is the eastern mental model: WW, XX, YY, and ZZ are persons. YY may kill WW because YY wants to kill WW. // TODO: What is this!? If value of variable test-expert-request is false: XX may kill YY because YY angers XX. If value of variable test-expert-request is false: YY may murder WW because YY wants to become king and because WW is the king and because YY is WW's successor. Start description of \"Revenge\". xx is an entity. yy is a entity. xx's harming yy leads to yy's harming xx. The end. Start story titled \"Eastern person's characteristics\". The end. Here is the western mental model: XX and YY are entities. If XX is American and XX becomes angry, then XX becomes violent. If XX becomes violent, then XX may kill YY. If XX kills YY then XX must not be sane. Start description of \"Insane violence\". XX's not being sane leads to XX 's killing YY. The end. Start story titled \"Western person's characteristics\". The end. Why can't there be three or more perspectives? How about I put text and configurations in different slots of json so that I can put in descriptions of scenes and characters. I can put all contents in one file so it's easier to control. See Local knowledge base for Genesis's local knowledge base. Here is corpora/stories/Shakespeare/Macbeth plot.txt Insert file Macbeth preface. Scotland and England are countries. Dunsinane is a castle and Birnam Wood is a forest. Macbeth, Macduff, Malcolm, Donalbain, Lady Macbeth, Lady Macduff, Cawdor, and Duncan are persons. Lady Macbeth is Macbeth's wife. Lady Macbeth is evil and greedy. Duncan is the king, and Macbeth is Duncan's successor. Duncan is an enemy of Cawdor. Macbeth is brave. ... The end. Here is corpora/stories/Shakespeare/Macbeth preface.txt Note that Cawdor is a name. Note that Duncan is a name. Note that Lady Macbeth is a feminine name. Note that Lady Macduff is a feminine name. Note that Macduff is a name. Note that Macbeth is a name. Note that Malcolm is a name. Note that Donalbain is a name. Note that Dunsinane is a name. Note that Birnam Wood is a name.","title":"The story files"},{"location":"genesis-controls/","text":"","title":"Controls"},{"location":"genesis-elaboration-graph/","text":"Elaboration Graph Elaboration Graph","title":"Elaboration Graph"},{"location":"genesis-elaboration-graph/#elaboration-graph","text":"Elaboration Graph","title":"Elaboration Graph"},{"location":"genesis-inspector/","text":"","title":"Genesis inspector"},{"location":"genesis-knowledge/","text":"Local Knowledge Base All the files exist in folder corpora/stories/Knowledge/ Common commonsense knowledge Insert file Relations knowledge. Insert file Estonia commonsense knowledge. Insert file Sellout knowledge. Insert file Core knowledge. Relations knowledge James is a person. George is a person. Mary is a person. Elizabeth is a person. James is George's relation because James is George's brother. James is George's relation because James is George's father. James is George's relation because James is George's son. Mary is George's relation because Mary is George's sister. Mary is George's relation because Mary is George's mother. Mary is George's relation because Mary is George's daughter. James is George's relation because James is George's child. Mary is George's relation because Mary is George's wife. George is Mary's relation because George is Mary's husband. Mary is Elizabeth's sister because Elizabeth is Mary's sister. xx is a person. yy is a person. zz is a person. If xx is yy's wife, then yy is xx's relation. If xx is yy's wife, then xx is yy's relation. If xx is yy's husband, then yy is xx's relation. If xx is yy's husband, then xx is yy's relation. If xx is yy's relation and zz harms yy then zz harms xx. Estonia commonsense knowledge xx is an entity. England, Germany, and France are countries. If England harms France then England angers France. If England attacks an artifact and France owns the artifact then England attacks France. If England attacks an army unit and France owns the army unit then England attacks France. If England attacks France then England harms France. If England harmed France and France is Germany's ally, then England harmed Germany. If xx is my ally, then xx is my friend. If England harmed France and France is my friend, then England harmed me. If England insults France, then England harms France. If England harms France, then France wants to harm England. If England damages France's artifact, France owns France's artifact, and France believes France's artifact is valuable, then England harms France. England believed artifact is valuable because England built artifact. England may build artifact because England believed artifact is valuable. England owns England's artifact because England built England's artifact. England wants to damage France's artifact because England wanted to harm France and because France believes France's artifact is valuable. England damaged France's artifact because England wants to damage France's artifact and because someone damaged France's artifact. If England wants to damage France's artifact and someone attacked France's artifact, then England attacked France's artifact. England became happy because England harmed France and because England wanted to harm France. England wants to harm France because France angers England. England may want to harm France because France does not respect England and because France angers England. France harmed England because France spurned England. England may fight France because France spurned England. England may fight France because France insulted England. England became unhappy because France damaged England's artifact and because England owns artifact. England became unhappy because France harmed England. England became happy because England owns artifact and artifact is valuable. //////// Additional commonsense knowledge needed to handle Georgia case ww is an entity. xx is an entity. yy is an entity. zz is an entity. // Part of If zz damages yy and yy is part of xx, then zz damages xx. zz wants to damage yy because zz wants to damage xx and yy is part of xx. // Knowledge about allies. ww is an ally of xx because xx supported ww. xx harmed yy because xx tried to control ww and ww is an ally of yy. // Knowledge linking belief in importance to belief in value If xx believes its artifact is important, then xx believes its artifact is valuable. // Knowledge about parts If zz attacks yy and yy is part of xx, then zz attacks xx. If zz damages yy and yy is part of xx, then zz damages xx. zz wants to attack yy because zz wants to attack xx and yy is part of xx. zz wants to damage yy because zz wants to damage xx and yy is part of xx. If zz wants to damage yy, then zz wants to attack yy. // Knowledge about attacks If xx attacks yy's zz and yy owns yy's zz, then xx harms yy. //////// End of new additional knowledge. Sellout // Additional commonsense knowledge for Lost in translation // yy assists xx because xx helps yy. If zz is an enemy of xx and yy is a friend of zz and yy assists xx, then yy angers zz. If zz is an enemy of xx and yy assists xx, then yy angers zz. If yy angers zz, then zz may harm yy. If xx is an ally of yy then xx is yy's friend. If I am an ally of yy then I am yy's friend. If xx helps yy then yy may assist xx. Core WW, XX, YY, and ZZ are entities. // Reasons to kill. // YY may kill WW because YY is crazy and YY likes WW. // WW may want to kill YY because WW is angry at YY. // Friends and relatives If YY harmed XX and XX is WW's friend, then YY harmed WW. If YY is the wife of XX, then XX is the husband of YY. If YY harmed XX and XX is WW's husband, then YY harmed WW. If YY harmed XX and XX is WW's wife, then YY harmed WW. // Generator won't work so well on this // If YY is the wife of XX, then YY is a relative of XX. If xx is an enemy of zz and yy is an enemy of zz then xx is a friend of yy. If xx is an enemy of zz and yy is an enemy of zz then yy is a friend of xx. // Succession. If XX is godfather and WW is XX's successor and XX becomes dead, then WW becomes godfather. If XX is king and WW is XX's successor and XX becomes dead, then WW becomes king. // ZZ becomes the queen because XX becomes the king and ZZ is XX's wife. YY becomes happy because YY becomes the king and YY wants to become the king. YY becomes happy because YY became the queen and YY wants to become the queen. // Wants //YY becomes happy because YY wants an action and an action occurs. // Harm. If YY harms WW, then WW becomes unhappy. If YY harms WW then YY angers WW. // Murder killing, and harming If xx kills yy, then yy becomes dead. If xx becomes dead, then xx becomes incapacitated. // Pause. YY harms WW because YY kills WW. YY harms WW because YY attacks WW. YY harms WW because YY fights WW. YY may attack WW because WW harms YY. YY may fight WW because WW attacks YY. // Proxy if xx asks yy to kill zz and yy kills zz, then xx kills zz. if xx asks yy to murder zz and yy murder zz, then xx murders zz because xx asks yy to murder zz. // Greed ZZ may want to become the queen because zz is greedy. // Persuasion // If ZZ wants an action, then ZZ may persuade YY to commit the action. // If ZZ persuades YY to act, then YY acts. // Coercion If an entity forces an action, then the action occurs. // Ok, its awkward, but it works // If an entity persuades an action to occur, then the action occurs. xx is a person. // Miscellaneous explanations If xx becomes distraught, xx may kill xx. // Censors Dead is a kind of property. If YY becomes dead, then YY cannot become happy. // If YY becomes dead and XX is an entity, then XX cannot harm YY. If YY becomes dead and XX is a person, then XX cannot anger YY. If YY becomes dead, then YY cannot become unhappy. If YY becomes dead and XX is an entity, then XX cannot anger YY. // If YY murders WW, then YY cannot anger WW. // If YY kills WW, then YY cannot anger WW. // Persuasion XX may persuade YY to attack ZZ because XX wants to harm ZZ. XX may persuade YY to murder ZZ because XX wants to murder ZZ. XX may persuade YY to murder ZZ because XX wants ZZ to become dead. If XX persuades YY to attack ZZ, then YY attacks ZZ. If XX persuades YY to murder ZZ, then YY murders ZZ. If XX wants YY to die, then XX wants YY to become dead. // Harm // If YY attacks ZZ, then YY harms ZZ. If XX persuades YY to attack ZZ, then XX harms ZZ. If XX angers ZZ, then ZZ may want to harm XX. If xx harms yy, then yy may persuade zz to attack xx. General reflective xx is an entity. yy is an entity. zz is an entity. /* Don't want this in core knowledge because screw up Macbeth two-culture example Start description of \"Revenge\". xx is an entity. yy is a entity. xx's harming yy leads to yy's harming xx. xx must not equal yy. The end. */ Start description of \"Pyrrhic victory\". xx is an entity. vv is an action. xx's wanting vv leads to xx's becoming happy. xx's wanting vv leads to xx's becoming incapacitated. xx becomes incapacitated after xx becomes happy. The end. /* Start description of \"Pyrrhic victory\". xx is an entity. vv is an action. yy is an entity. xx's performing vv leads to xx's becoming happy. xx's performing vv leads to yy's incapacitating xx. yy incapacitates xx after xx becomes happy. The end. */ Start description of \"Mistake because harmed\". xx is an entity. yy is an entity. aa is an action. xx's wanting aa leads to yy's harming xx. The end. Start description of \"Mistake because harmed\". xx is an entity. yy is an entity. xx's insulting yy leads to yy's harming xx. The end. Start description of \"Mistake because unhappy\". xx is an entity. aa is an action. xx's wanting aa leads to xx's becoming unhappy. The end. Start description of \"Suicide\". xx is an entity. xx kills xx. The end. Start description of \"Success\". xx is an entity. aa is an action. xx's wanting aa leads to aa. aa leads to xx's becoming happy. The end. Start description of \"Regicide\". xx is an entity. yy is a king. xx murders yy. The end. Start description of \"Answered prayer\". xx is an entity. aa is an action. xx's wanting aa leads to aa. The end. /* Part of Macbeth culture demo, leave out Start description of \"Insane violence\". xx is an entity. yy is a entity. xx's being not sane leads to xx's killing yy. The end. */ Start description of \"Insane Suicide\". xx is an entity. xx's becoming crazy leads to xx's killing xx. The end. Start description of \"Retribution\". xx is an entity. yy is an entity. zz's assisting xx leads to yy's harming zz. The end. Start description of \"Sell out\". xx is an entity. yy is a entity. zz is a entity. yy is an enemy of zz. yy help xx. I am a friend of yy. zz's helping xx leads to xx's angering yy. The end. Start description of \"Misguided retaliation\". xx is an entity. yy is a entity. xx is my friend. xx's angering yy leads to yy's harming xx. The end. Start description of \"Teaching a lesson\". xx is an entity. yy is a entity. yy is my friend. xx's angering yy leads to yy's harming xx. The end.","title":"Local Knowledge Base"},{"location":"genesis-knowledge/#local-knowledge-base","text":"All the files exist in folder corpora/stories/Knowledge/","title":"Local Knowledge Base"},{"location":"genesis-knowledge/#common-commonsense-knowledge","text":"Insert file Relations knowledge. Insert file Estonia commonsense knowledge. Insert file Sellout knowledge. Insert file Core knowledge.","title":"Common commonsense knowledge"},{"location":"genesis-knowledge/#relations-knowledge","text":"James is a person. George is a person. Mary is a person. Elizabeth is a person. James is George's relation because James is George's brother. James is George's relation because James is George's father. James is George's relation because James is George's son. Mary is George's relation because Mary is George's sister. Mary is George's relation because Mary is George's mother. Mary is George's relation because Mary is George's daughter. James is George's relation because James is George's child. Mary is George's relation because Mary is George's wife. George is Mary's relation because George is Mary's husband. Mary is Elizabeth's sister because Elizabeth is Mary's sister. xx is a person. yy is a person. zz is a person. If xx is yy's wife, then yy is xx's relation. If xx is yy's wife, then xx is yy's relation. If xx is yy's husband, then yy is xx's relation. If xx is yy's husband, then xx is yy's relation. If xx is yy's relation and zz harms yy then zz harms xx.","title":"Relations knowledge"},{"location":"genesis-knowledge/#estonia-commonsense-knowledge","text":"xx is an entity. England, Germany, and France are countries. If England harms France then England angers France. If England attacks an artifact and France owns the artifact then England attacks France. If England attacks an army unit and France owns the army unit then England attacks France. If England attacks France then England harms France. If England harmed France and France is Germany's ally, then England harmed Germany. If xx is my ally, then xx is my friend. If England harmed France and France is my friend, then England harmed me. If England insults France, then England harms France. If England harms France, then France wants to harm England. If England damages France's artifact, France owns France's artifact, and France believes France's artifact is valuable, then England harms France. England believed artifact is valuable because England built artifact. England may build artifact because England believed artifact is valuable. England owns England's artifact because England built England's artifact. England wants to damage France's artifact because England wanted to harm France and because France believes France's artifact is valuable. England damaged France's artifact because England wants to damage France's artifact and because someone damaged France's artifact. If England wants to damage France's artifact and someone attacked France's artifact, then England attacked France's artifact. England became happy because England harmed France and because England wanted to harm France. England wants to harm France because France angers England. England may want to harm France because France does not respect England and because France angers England. France harmed England because France spurned England. England may fight France because France spurned England. England may fight France because France insulted England. England became unhappy because France damaged England's artifact and because England owns artifact. England became unhappy because France harmed England. England became happy because England owns artifact and artifact is valuable. //////// Additional commonsense knowledge needed to handle Georgia case ww is an entity. xx is an entity. yy is an entity. zz is an entity. // Part of If zz damages yy and yy is part of xx, then zz damages xx. zz wants to damage yy because zz wants to damage xx and yy is part of xx. // Knowledge about allies. ww is an ally of xx because xx supported ww. xx harmed yy because xx tried to control ww and ww is an ally of yy. // Knowledge linking belief in importance to belief in value If xx believes its artifact is important, then xx believes its artifact is valuable. // Knowledge about parts If zz attacks yy and yy is part of xx, then zz attacks xx. If zz damages yy and yy is part of xx, then zz damages xx. zz wants to attack yy because zz wants to attack xx and yy is part of xx. zz wants to damage yy because zz wants to damage xx and yy is part of xx. If zz wants to damage yy, then zz wants to attack yy. // Knowledge about attacks If xx attacks yy's zz and yy owns yy's zz, then xx harms yy. //////// End of new additional knowledge.","title":"Estonia commonsense knowledge"},{"location":"genesis-knowledge/#sellout","text":"// Additional commonsense knowledge for Lost in translation // yy assists xx because xx helps yy. If zz is an enemy of xx and yy is a friend of zz and yy assists xx, then yy angers zz. If zz is an enemy of xx and yy assists xx, then yy angers zz. If yy angers zz, then zz may harm yy. If xx is an ally of yy then xx is yy's friend. If I am an ally of yy then I am yy's friend. If xx helps yy then yy may assist xx.","title":"Sellout"},{"location":"genesis-knowledge/#core","text":"WW, XX, YY, and ZZ are entities. // Reasons to kill. // YY may kill WW because YY is crazy and YY likes WW. // WW may want to kill YY because WW is angry at YY. // Friends and relatives If YY harmed XX and XX is WW's friend, then YY harmed WW. If YY is the wife of XX, then XX is the husband of YY. If YY harmed XX and XX is WW's husband, then YY harmed WW. If YY harmed XX and XX is WW's wife, then YY harmed WW. // Generator won't work so well on this // If YY is the wife of XX, then YY is a relative of XX. If xx is an enemy of zz and yy is an enemy of zz then xx is a friend of yy. If xx is an enemy of zz and yy is an enemy of zz then yy is a friend of xx. // Succession. If XX is godfather and WW is XX's successor and XX becomes dead, then WW becomes godfather. If XX is king and WW is XX's successor and XX becomes dead, then WW becomes king. // ZZ becomes the queen because XX becomes the king and ZZ is XX's wife. YY becomes happy because YY becomes the king and YY wants to become the king. YY becomes happy because YY became the queen and YY wants to become the queen. // Wants //YY becomes happy because YY wants an action and an action occurs. // Harm. If YY harms WW, then WW becomes unhappy. If YY harms WW then YY angers WW. // Murder killing, and harming If xx kills yy, then yy becomes dead. If xx becomes dead, then xx becomes incapacitated. // Pause. YY harms WW because YY kills WW. YY harms WW because YY attacks WW. YY harms WW because YY fights WW. YY may attack WW because WW harms YY. YY may fight WW because WW attacks YY. // Proxy if xx asks yy to kill zz and yy kills zz, then xx kills zz. if xx asks yy to murder zz and yy murder zz, then xx murders zz because xx asks yy to murder zz. // Greed ZZ may want to become the queen because zz is greedy. // Persuasion // If ZZ wants an action, then ZZ may persuade YY to commit the action. // If ZZ persuades YY to act, then YY acts. // Coercion If an entity forces an action, then the action occurs. // Ok, its awkward, but it works // If an entity persuades an action to occur, then the action occurs. xx is a person. // Miscellaneous explanations If xx becomes distraught, xx may kill xx. // Censors Dead is a kind of property. If YY becomes dead, then YY cannot become happy. // If YY becomes dead and XX is an entity, then XX cannot harm YY. If YY becomes dead and XX is a person, then XX cannot anger YY. If YY becomes dead, then YY cannot become unhappy. If YY becomes dead and XX is an entity, then XX cannot anger YY. // If YY murders WW, then YY cannot anger WW. // If YY kills WW, then YY cannot anger WW. // Persuasion XX may persuade YY to attack ZZ because XX wants to harm ZZ. XX may persuade YY to murder ZZ because XX wants to murder ZZ. XX may persuade YY to murder ZZ because XX wants ZZ to become dead. If XX persuades YY to attack ZZ, then YY attacks ZZ. If XX persuades YY to murder ZZ, then YY murders ZZ. If XX wants YY to die, then XX wants YY to become dead. // Harm // If YY attacks ZZ, then YY harms ZZ. If XX persuades YY to attack ZZ, then XX harms ZZ. If XX angers ZZ, then ZZ may want to harm XX. If xx harms yy, then yy may persuade zz to attack xx.","title":"Core"},{"location":"genesis-knowledge/#general-reflective","text":"xx is an entity. yy is an entity. zz is an entity. /* Don't want this in core knowledge because screw up Macbeth two-culture example Start description of \"Revenge\". xx is an entity. yy is a entity. xx's harming yy leads to yy's harming xx. xx must not equal yy. The end. */ Start description of \"Pyrrhic victory\". xx is an entity. vv is an action. xx's wanting vv leads to xx's becoming happy. xx's wanting vv leads to xx's becoming incapacitated. xx becomes incapacitated after xx becomes happy. The end. /* Start description of \"Pyrrhic victory\". xx is an entity. vv is an action. yy is an entity. xx's performing vv leads to xx's becoming happy. xx's performing vv leads to yy's incapacitating xx. yy incapacitates xx after xx becomes happy. The end. */ Start description of \"Mistake because harmed\". xx is an entity. yy is an entity. aa is an action. xx's wanting aa leads to yy's harming xx. The end. Start description of \"Mistake because harmed\". xx is an entity. yy is an entity. xx's insulting yy leads to yy's harming xx. The end. Start description of \"Mistake because unhappy\". xx is an entity. aa is an action. xx's wanting aa leads to xx's becoming unhappy. The end. Start description of \"Suicide\". xx is an entity. xx kills xx. The end. Start description of \"Success\". xx is an entity. aa is an action. xx's wanting aa leads to aa. aa leads to xx's becoming happy. The end. Start description of \"Regicide\". xx is an entity. yy is a king. xx murders yy. The end. Start description of \"Answered prayer\". xx is an entity. aa is an action. xx's wanting aa leads to aa. The end. /* Part of Macbeth culture demo, leave out Start description of \"Insane violence\". xx is an entity. yy is a entity. xx's being not sane leads to xx's killing yy. The end. */ Start description of \"Insane Suicide\". xx is an entity. xx's becoming crazy leads to xx's killing xx. The end. Start description of \"Retribution\". xx is an entity. yy is an entity. zz's assisting xx leads to yy's harming zz. The end. Start description of \"Sell out\". xx is an entity. yy is a entity. zz is a entity. yy is an enemy of zz. yy help xx. I am a friend of yy. zz's helping xx leads to xx's angering yy. The end. Start description of \"Misguided retaliation\". xx is an entity. yy is a entity. xx is my friend. xx's angering yy leads to yy's harming xx. The end. Start description of \"Teaching a lesson\". xx is an entity. yy is a entity. yy is my friend. xx's angering yy leads to yy's harming xx. The end.","title":"General reflective"},{"location":"genesis-panes/","text":"Panes","title":"Panes"},{"location":"genesis-panes/#panes","text":"","title":"Panes"},{"location":"genesis-subsystems/","text":"","title":"Genesis subsystems"},{"location":"genesis-switches/","text":"Switches","title":"Switches"},{"location":"genesis-switches/#switches","text":"","title":"Switches"},{"location":"genesis-views/","text":"","title":"Genesis views"},{"location":"gui-subsystems/","text":"Genesis Subsystems: Functions and Options Storyteller Options include four kinds of teaching goal, a.k.a. granularity of instruction: Tell - Show the elaboration graph of the student with its own mental model Spoon feed - The teacher relays the missing element to the student via the student\u2019s Story Element Input Port . Explain - The teacher relays the missing element, as well as the story element which is a cause of the missing story element as seen on the teacher's elaboration graph to the student via the student\u2019s Story Element Input Port . Teach (principles) - The teacher relays the missing story element on the student\u2019s Story Element Input Port , and relays the general rule that will enable the missing story element to be included in the student's elaboration graph on the student\u2019s Rule Input Port .","title":"Subsystems"},{"location":"gui-subsystems/#genesis-subsystems-functions-and-options","text":"","title":"Genesis Subsystems: Functions and Options"},{"location":"gui-subsystems/#storyteller","text":"Options include four kinds of teaching goal, a.k.a. granularity of instruction: Tell - Show the elaboration graph of the student with its own mental model Spoon feed - The teacher relays the missing element to the student via the student\u2019s Story Element Input Port . Explain - The teacher relays the missing element, as well as the story element which is a cause of the missing story element as seen on the teacher's elaboration graph to the student via the student\u2019s Story Element Input Port . Teach (principles) - The teacher relays the missing story element on the student\u2019s Story Element Input Port , and relays the general rule that will enable the missing story element to be included in the student's elaboration graph on the student\u2019s Rule Input Port .","title":"Storyteller"},{"location":"hypothetical-reasoner/","text":"What-If Hypothetical reasoner Demo The program will read a short courtroom-style story about a husband who uses a gun to defend himself from his wife's knife-wielding lover. Based on the events in the story, the program reasons that the story is about self-defense. When asked how the analysis would differ if the lover did not brandish a knife, the program is able to reason about its own thinking; it concludes that in the second case, the husband's response is unjustified. The elaboration graphs before and after the insertion of element: Main difference in reasoning: The two rules used differently in the two cases: If xx brandishes a knife, then xx intends to harm someone. xx may shoot yy because yy intends to harm someone. xx can shoot yy because xx despises yy. In original story, the event of \"Alex brandishes a knife\" triggers a deduction rule, which is prevents the trigger of explanation rule \"xx can shoot yy because xx despises yy\": Alex and George despise each other. George encounters Alex and Martha at a bar. George yells at Alex. Alex brandishes a knife. Alex becomes dead because George shoots Alex. The analysis: Any event can be removed from the story by asking \"What would happen if [an event didn't happen].\"","title":"Hypothetical Reasoner"},{"location":"hypothetical-reasoner/#what-if-hypothetical-reasoner","text":"","title":"What-If Hypothetical reasoner"},{"location":"hypothetical-reasoner/#demo","text":"The program will read a short courtroom-style story about a husband who uses a gun to defend himself from his wife's knife-wielding lover. Based on the events in the story, the program reasons that the story is about self-defense. When asked how the analysis would differ if the lover did not brandish a knife, the program is able to reason about its own thinking; it concludes that in the second case, the husband's response is unjustified. The elaboration graphs before and after the insertion of element: Main difference in reasoning: The two rules used differently in the two cases: If xx brandishes a knife, then xx intends to harm someone. xx may shoot yy because yy intends to harm someone. xx can shoot yy because xx despises yy. In original story, the event of \"Alex brandishes a knife\" triggers a deduction rule, which is prevents the trigger of explanation rule \"xx can shoot yy because xx despises yy\": Alex and George despise each other. George encounters Alex and Martha at a bar. George yells at Alex. Alex brandishes a knife. Alex becomes dead because George shoots Alex. The analysis: Any event can be removed from the story by asking \"What would happen if [an event didn't happen].\"","title":"Demo"},{"location":"hypothetical/","text":"","title":"Hypothetical"},{"location":"inference/","text":"Inference by Rules ... Prediction rules The story becomes more interesting when you add common sense prediction rules. Prediction rules establish connections between one or more antecedents and one consequent. Here, Genesis is told that if a person kills someone, that other person becomes dead: Start experiment. xx, yy, and zz are persons. // A prediction rule: If xx kills yy then yy becomes dead. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macduff kills Macbeth. The end. Now in the elaboration graph, in yellow, you see the consequent event, and that consequent is connected to its antecedent by a line, as shown in figure below: Common sense rules are generally of the form If ... then .... , but you can also use an alternate form with the word because : yy becomes dead because xx kills yy. ... Explanation rules We humans always seek explanations, so Genesis uses explanation rules to join a action to a previous action whenever an event occurs that would otherwise lack an explanation. Consider this version: Start experiment. xx, yy, and zz are persons. // A prediction rule: If xx kills yy then yy becomes dead. // An explanation rule; note use of \"may\": If xx angers yy, then yy may kill xx. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth angers Macduff. Macduff kills Macbeth. The end. The explanation rule indicates that if there is no other explanation for yy killing xx, and there is an assertion already that xx angers yy, then there is an assumed causal connection. The reason for explanation rules, marked with may , is that the antecedent, in this example, xx angers yy , does not always lead to the consequent, yy kills xx . The result appears in the elaboration graph shown in figure below: Note that explanation-rule connections are shown in orange and dotted, rather than solid black. Note also that explanation rules can be, like inference rules, expressed with because : xx may murder yy because xx wants to murder yy. ... Presumption rules Genesis uses presumption rules to join an action to an imagined cause whenever there is no other explanation for an action and no explanation rule provides one. Explanation rules require their antecedents to be in a story; presumption rules put antecedents into the story, as in the following example: Start experiment. xx, yy, and zz are persons. // A presumption rule; note use of \"can be\" If xx is foolish, xx can be greedy. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth is greedy. The end. The result appears in the elaboration graph shown in figure below: ... Abduction rules Sometimes we assume a cause when a consequence is stated, thus doing abductive inference. Thus, abduction is something like presumption, but happens no matter whether there is an alternative explanation or not. For example, Genesis can conclude that if someone murders someone else, that person must be insane: Start experiment. xx, yy, and zz are persons. // A prediction rule: If xx kills yy then yy becomes dead. // An abduction rule; note use of \"must be\" If xx kills yy, xx must be insane. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth murders Duncan. The end. The result is shown in the elaboration graph shown in figure below: ... Enablement rules Sometimes we assume a required condition must hold because a certain type of action occurred. Genesis uses enablement rules to do so. For example, Genesis can conclude that if someone stabs someone else, that person have a knife. Start experiment. xx, yy, and zz are persons. // An enablement rule; note use of \"enables\" Xx\u2019s having a knife enables xx\u2019s stabbing yy. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth stabs Duncan. The end. The result is shown in the elaboration graph shown in figure below: ... Post hoc ergo propter hoc When two events are adjacent to each other in the story, we can indicate a causal connection using a post hoc ergo propter hoc rule, as in: Start experiment. xx, yy, and zz are persons. // A post hoc ergo proper hoc rule; note use of semicolon xx becomes king; yy becomes angry. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth becomes king. Macduff becomes angry. The end. Because Macduff \u2019s becoming angry directly follows Macbeth becomes king , the rule yields the result shown in figure below: Note that if there are any sentences in between, the rule does not apply. ... Censor rules A censor rule prevents inference and explanation rules from making ridiculous conclusions. For example, if you murder someone, you harm them. If you harm someone, that person becomes unhappy. But if you murder someone, that person cannot come to have some emotional state because that person is dead, even though an inference rule thinks that person should become unhappy. The solution is to introduce a censor rule: If YY becomes dead, then YY cannot become unhappy. Such a rule, indicated by cannot , prevents any other rule from asserting that someone is unhappy after that person becomes dead. Start experiment. xx, yy, and zz are persons. // A prediction rule: If xx kills yy then yy becomes dead. // An explanation rule; note use of \"may\": If xx angers yy, then yy may kill xx. // A presumption rule; note use of \"can be\" If xx is foolish, xx can be greedy. // An abduction rule; note use of \"must be\" If xx kills yy, xx must be insane. // An enablement rule; note use of \"enables\" Xx\u2019s having a knife enables xx\u2019s stabbing yy. // A post hoc ergo proper hoc rule; note use of semicolon xx becomes king; yy becomes angry. // A censor rule; note use of cannot If xx becomes dead, then xx cannot become unhappy. // Prediction rules that would otherwise make a person unhappy if killed. If xx kills yy then xx harms yy. If xx harms yy then yy becomes unhappy. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth murders Duncan. The end. Before adding the censor rule: After adding the censor rule If xx becomes dead, then xx cannot become unhappy : Multiple antecedents/consequents Inference rules, explanation rules, and censor rules all may have multiple antecedents, as in this inference rule: Start experiment. xx, yy, and zz are things. If xx is a kind of yy and yy is a kind of zz, then xx is a kind of zz. Start story titled \"Tiger is animal\". Tiger is a kind of cat. Cat is a kind of animal. The end. Inference rules may not have multiple consequents, however. You would need to express such a rule as multiple rules, one for each consequent. Explicit connections Sometimes stories can contain explicit causal connections. ... Cause expressions Explicit cause expressions connect antecedents to consequents. For example: Start experiment. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth wants to murder Duncan because Macbeth wants to become king. The end. The result appears in the elaboration graph, which now has an explicit connection, as shown in figure below: ... Leads to expressions You can also use leads to expressions in stories, meaning there is a causal connection, but the details are not given, as in: Start experiment. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth\u2019s murdering Duncan leads to Macduff\u2019s fleeing to England. The end. The result appears in the elaboration graph, which now has an leads-to connection, as shown in figure below: ... Strangely leads to expressions If you wish, you can add Strangely , indicating that the details are unknowable, which comes up, for example, in Victor Yarlott\u2019s work on Crow folklore: Start experiment. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Strangely, Macbeth\u2019s murdering Duncan leads to Macbeth\u2019s hallucinating. The end. ... In order to expressions Genesis treats means as a kind of causal connection because the means enables the action, as in the following: Start experiment. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. In order to murder Duncan, Macbeth kills the guards and stabs Duncan. The end. The result is shown in figure below: Probabilities Ordinary entities as well as prediction rules and explanation rules can have probabilities attached. The attachment is expressed as in the following examples (at this writing, if forms do not parse). With probability of 0.2 xx becomes dead. With probability of 0.7 xx becomes dead because yy stabs xx. With probability of 0.2 xx may kill yy because yy angers xx. What you do with these probabilities is for you to decide, as at the moment, nothing uses them. Note that the entity getter, getProbability , fetches an entity\u2019s probability if there is one, or null otherwise. Summary Genesis uses 7 kinds of rules and 5 types of explicit expressions to connect story elements, existing or inferred. Rules might connect existing story elements or introducing new elements, with optionally the probability of the rule firing: Type Element in story Example Prediction rule 1st If xx kills yy then yy becomes dead. Censor rule 1st If xx becomes dead, then xx cannot become unhappy. Presumption rule 2nd If xx is foolish, xx can be greedy. Abduction rule 2nd If xx kills yy, xx must be insane. Enablement rule 2nd xx\u2019s having a knife enables xx\u2019s stabbing yy. Explanation rule both If xx angers yy, then yy may kill xx. Post hoc ergo proper hoc rule both xx becomes king ; yy becomes angry. Explicit expressions connect existing story elements. Type Example Cause expression Macbeth wants to murder Duncan because Macbeth wants to become king. Leads to expression Macbeth\u2019s murdering Duncan leads to Macduff\u2019s fleeing to England. Strangely leads to expression Strangely, Macbeth\u2019s murdering Duncan leads to Macbeth\u2019s hallucinating. In order to expressions In order to murder Duncan, Macbeth kills the guards and stabs Duncan. After color coding, the Elaboration Graph can be populated with existing story elements (white, cyan, magenta, gray boxes) and inferred elements (yellow, orange, purple, pink boxes): | | This version is edited by Zhutian Yang, on 6 August 2019 An older version of How to speak Genesese is authored by Patrick H. Winston, on June 8, 2018","title":"Inference by Rules"},{"location":"inference/#inference-by-rules","text":"","title":"Inference by Rules"},{"location":"inference/#prediction-rules","text":"The story becomes more interesting when you add common sense prediction rules. Prediction rules establish connections between one or more antecedents and one consequent. Here, Genesis is told that if a person kills someone, that other person becomes dead: Start experiment. xx, yy, and zz are persons. // A prediction rule: If xx kills yy then yy becomes dead. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macduff kills Macbeth. The end. Now in the elaboration graph, in yellow, you see the consequent event, and that consequent is connected to its antecedent by a line, as shown in figure below: Common sense rules are generally of the form If ... then .... , but you can also use an alternate form with the word because : yy becomes dead because xx kills yy.","title":"... Prediction rules"},{"location":"inference/#explanation-rules","text":"We humans always seek explanations, so Genesis uses explanation rules to join a action to a previous action whenever an event occurs that would otherwise lack an explanation. Consider this version: Start experiment. xx, yy, and zz are persons. // A prediction rule: If xx kills yy then yy becomes dead. // An explanation rule; note use of \"may\": If xx angers yy, then yy may kill xx. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth angers Macduff. Macduff kills Macbeth. The end. The explanation rule indicates that if there is no other explanation for yy killing xx, and there is an assertion already that xx angers yy, then there is an assumed causal connection. The reason for explanation rules, marked with may , is that the antecedent, in this example, xx angers yy , does not always lead to the consequent, yy kills xx . The result appears in the elaboration graph shown in figure below: Note that explanation-rule connections are shown in orange and dotted, rather than solid black. Note also that explanation rules can be, like inference rules, expressed with because : xx may murder yy because xx wants to murder yy.","title":"... Explanation rules"},{"location":"inference/#presumption-rules","text":"Genesis uses presumption rules to join an action to an imagined cause whenever there is no other explanation for an action and no explanation rule provides one. Explanation rules require their antecedents to be in a story; presumption rules put antecedents into the story, as in the following example: Start experiment. xx, yy, and zz are persons. // A presumption rule; note use of \"can be\" If xx is foolish, xx can be greedy. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth is greedy. The end. The result appears in the elaboration graph shown in figure below:","title":"... Presumption rules"},{"location":"inference/#abduction-rules","text":"Sometimes we assume a cause when a consequence is stated, thus doing abductive inference. Thus, abduction is something like presumption, but happens no matter whether there is an alternative explanation or not. For example, Genesis can conclude that if someone murders someone else, that person must be insane: Start experiment. xx, yy, and zz are persons. // A prediction rule: If xx kills yy then yy becomes dead. // An abduction rule; note use of \"must be\" If xx kills yy, xx must be insane. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth murders Duncan. The end. The result is shown in the elaboration graph shown in figure below:","title":"... Abduction rules"},{"location":"inference/#enablement-rules","text":"Sometimes we assume a required condition must hold because a certain type of action occurred. Genesis uses enablement rules to do so. For example, Genesis can conclude that if someone stabs someone else, that person have a knife. Start experiment. xx, yy, and zz are persons. // An enablement rule; note use of \"enables\" Xx\u2019s having a knife enables xx\u2019s stabbing yy. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth stabs Duncan. The end. The result is shown in the elaboration graph shown in figure below:","title":"... Enablement rules"},{"location":"inference/#post-hoc-ergo-propter-hoc","text":"When two events are adjacent to each other in the story, we can indicate a causal connection using a post hoc ergo propter hoc rule, as in: Start experiment. xx, yy, and zz are persons. // A post hoc ergo proper hoc rule; note use of semicolon xx becomes king; yy becomes angry. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth becomes king. Macduff becomes angry. The end. Because Macduff \u2019s becoming angry directly follows Macbeth becomes king , the rule yields the result shown in figure below: Note that if there are any sentences in between, the rule does not apply.","title":"... Post hoc ergo propter hoc"},{"location":"inference/#censor-rules","text":"A censor rule prevents inference and explanation rules from making ridiculous conclusions. For example, if you murder someone, you harm them. If you harm someone, that person becomes unhappy. But if you murder someone, that person cannot come to have some emotional state because that person is dead, even though an inference rule thinks that person should become unhappy. The solution is to introduce a censor rule: If YY becomes dead, then YY cannot become unhappy. Such a rule, indicated by cannot , prevents any other rule from asserting that someone is unhappy after that person becomes dead. Start experiment. xx, yy, and zz are persons. // A prediction rule: If xx kills yy then yy becomes dead. // An explanation rule; note use of \"may\": If xx angers yy, then yy may kill xx. // A presumption rule; note use of \"can be\" If xx is foolish, xx can be greedy. // An abduction rule; note use of \"must be\" If xx kills yy, xx must be insane. // An enablement rule; note use of \"enables\" Xx\u2019s having a knife enables xx\u2019s stabbing yy. // A post hoc ergo proper hoc rule; note use of semicolon xx becomes king; yy becomes angry. // A censor rule; note use of cannot If xx becomes dead, then xx cannot become unhappy. // Prediction rules that would otherwise make a person unhappy if killed. If xx kills yy then xx harms yy. If xx harms yy then yy becomes unhappy. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth murders Duncan. The end. Before adding the censor rule: After adding the censor rule If xx becomes dead, then xx cannot become unhappy :","title":"... Censor rules"},{"location":"inference/#multiple-antecedentsconsequents","text":"Inference rules, explanation rules, and censor rules all may have multiple antecedents, as in this inference rule: Start experiment. xx, yy, and zz are things. If xx is a kind of yy and yy is a kind of zz, then xx is a kind of zz. Start story titled \"Tiger is animal\". Tiger is a kind of cat. Cat is a kind of animal. The end. Inference rules may not have multiple consequents, however. You would need to express such a rule as multiple rules, one for each consequent.","title":"Multiple antecedents/consequents"},{"location":"inference/#explicit-connections","text":"Sometimes stories can contain explicit causal connections.","title":"Explicit connections"},{"location":"inference/#cause-expressions","text":"Explicit cause expressions connect antecedents to consequents. For example: Start experiment. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth wants to murder Duncan because Macbeth wants to become king. The end. The result appears in the elaboration graph, which now has an explicit connection, as shown in figure below:","title":"... Cause expressions"},{"location":"inference/#leads-to-expressions","text":"You can also use leads to expressions in stories, meaning there is a causal connection, but the details are not given, as in: Start experiment. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth\u2019s murdering Duncan leads to Macduff\u2019s fleeing to England. The end. The result appears in the elaboration graph, which now has an leads-to connection, as shown in figure below:","title":"... Leads to expressions"},{"location":"inference/#strangely-leads-to-expressions","text":"If you wish, you can add Strangely , indicating that the details are unknowable, which comes up, for example, in Victor Yarlott\u2019s work on Crow folklore: Start experiment. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Strangely, Macbeth\u2019s murdering Duncan leads to Macbeth\u2019s hallucinating. The end.","title":"... Strangely leads to expressions"},{"location":"inference/#in-order-to-expressions","text":"Genesis treats means as a kind of causal connection because the means enables the action, as in the following: Start experiment. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. In order to murder Duncan, Macbeth kills the guards and stabs Duncan. The end. The result is shown in figure below:","title":"... In order to expressions"},{"location":"inference/#probabilities","text":"Ordinary entities as well as prediction rules and explanation rules can have probabilities attached. The attachment is expressed as in the following examples (at this writing, if forms do not parse). With probability of 0.2 xx becomes dead. With probability of 0.7 xx becomes dead because yy stabs xx. With probability of 0.2 xx may kill yy because yy angers xx. What you do with these probabilities is for you to decide, as at the moment, nothing uses them. Note that the entity getter, getProbability , fetches an entity\u2019s probability if there is one, or null otherwise.","title":"Probabilities"},{"location":"inference/#summary","text":"Genesis uses 7 kinds of rules and 5 types of explicit expressions to connect story elements, existing or inferred. Rules might connect existing story elements or introducing new elements, with optionally the probability of the rule firing: Type Element in story Example Prediction rule 1st If xx kills yy then yy becomes dead. Censor rule 1st If xx becomes dead, then xx cannot become unhappy. Presumption rule 2nd If xx is foolish, xx can be greedy. Abduction rule 2nd If xx kills yy, xx must be insane. Enablement rule 2nd xx\u2019s having a knife enables xx\u2019s stabbing yy. Explanation rule both If xx angers yy, then yy may kill xx. Post hoc ergo proper hoc rule both xx becomes king ; yy becomes angry. Explicit expressions connect existing story elements. Type Example Cause expression Macbeth wants to murder Duncan because Macbeth wants to become king. Leads to expression Macbeth\u2019s murdering Duncan leads to Macduff\u2019s fleeing to England. Strangely leads to expression Strangely, Macbeth\u2019s murdering Duncan leads to Macbeth\u2019s hallucinating. In order to expressions In order to murder Duncan, Macbeth kills the guards and stabs Duncan. After color coding, the Elaboration Graph can be populated with existing story elements (white, cyan, magenta, gray boxes) and inferred elements (yellow, orange, purple, pink boxes): | | This version is edited by Zhutian Yang, on 6 August 2019 An older version of How to speak Genesese is authored by Patrick H. Winston, on June 8, 2018","title":"Summary"},{"location":"innerese/","text":"Innerese Innerese is the semantic structure used by Genesis System. It is based on what linguists call \"thematic role frames,\" or role frames for short. There are four classes of Innerese frames: The Entity class. A entity is usually a physical physical object. (So called so as not to conflict with Java\u2019s Object class) The Function class. A function suggests the thematic role served by certain frame. The Relation class. A relation indicates how one frame is connected to another frame. The Sequence class. A sequence contains any number of frames. The class heritage is: Entity __|__ / \\ function sequence | relation A Entity instance has no internal structure. Function , Relation , and Sequence consists of nested sequences of frames. The Entity class The most fundamental class is the Entity class. Every instance of Entity has a unique name and bundle of threads. Because entities have threads, so do functions, relations, and sequences. Instances of Entity has no internal structure. To create a new entity, identified as both a ball and a baseball, you execute the following: Entity x = new Entity (\"ball\"); x.addType(\"baseball\"); Then, you can inspect the result via print statements: Mark.say(x) Mark.say(\"----\") Mark.say(x.toXML); The results: >>> (ent baseball-0) >>> ---- >>> <entity> <name>baseball-0</name> <bundle><thread>entity ball baseball</thread></bundle> </entity> The first thread of possibly many threads in the thread bundle is considered the primed thread. Whenever you add a type to a entity, using the addType method, that new type goes to the end of the primed thread. The isA predicate tests for class membership by checking all the threads. Hence x.isA(\"ball\") returns true , but x.isA(\"person\") returns false . The Function class The Function class represents Jackendoff\u2019s places and path elements. The Function class provides getSubject and setSubject accessors. The subject is to be filled with an instance of Entity or its subclass. To construct a function that represents the top of a table: Entity e = new Entity(\"table\"); Function f = new Function(\"top\", e); Mark.say(f); Mark.say(f.getSubject()); The results: >>> (fun top (ent table-1)) >>> (ent table-1) The Relation class The Relation class simply adds an object slot to the Function class, with getObject and setObject accessors. Entity d = new Entity(\"door\"); Entity w = new Entity(\"window\"); Relation r = new Relation(\"between\", d, w); Mark.say(r); Mark.say(r.getSubject()); Mark.say(r.getObject()); The results: >>> (rel between (ent door-4) (ent window-5)) >>> (ent door-4) >>> (ent window-5) The Sequence class An Innerese representation of a sentence may consists of a sequence of relations. A relation may exists between an entity and a sequence of functions. Sequences can appear when Genesis produces role frames from English. For example, Given John killed Peter with a knife , Genesis produces a sequence containing two roles, one for the object, Peter, and one for the instrument, the knife. Sequence roles = new Sequence(\"roles\"); roles.addElement(new Function(\"object\", new Entity(\"Peter\"))); roles.addElement(new Function(\"with\", new Entity(\"knife\"))); Relation k = new Relation(\"kill\", new Entity(\"John\"), roles); Mark.say(roles); Mark.say(k); The results: >>> (seq roles (fun object (ent Peter-8)) (fun with (ent knife-10))) >>> (rel kill (ent John-12) (seq roles (fun object (ent Peter-8)) (fun with (ent knife-10)))) Innerese is an implementation of Role frames. Much of what Genesis reads ends up in what linguists call thematic role frames, role frames for short, which consist of an actor along with an act or property and optionally various entities that fill varous roles in the act. Thus, in John killed Peter with a knife , John is the actor , kill is the act , and Peter is the object . The knife entity, marked by a with preposition, fills what linguists would call the instrument role. In Genesis, role frames are implemented thusly: the actor entity is the subject ( John ) of a relation, whose type indicates the act or property involved ( kill ). All the role fillers, such as the object and instrument roles, are collected into a sequence that becomes the object of the relation. Each role mentioned in the sequence is embedded in a function indicating something about the role played. For example, the object role is embedded in an object function; the instrument role is embedded in the with function. Innerese can be visualized as nested \"frames\" The printed linear form of entities, functions, relations and sequences is far from transparent. Accordingly, when such instances are presented in a GUI they appear in a form conceived by Keith Bonawitz. Here is a Bonowitz rendering of the role frame for John killed Peter with a knife . Note the color coding: entities in gray, functions in blue, relatioins in red, sequences in black. Also note that when you hove over various parts of the diagram, you see the various threads Genesis associates with each entity. Next, you see a more complicated example in which two role frames are embedded in a stucture that ties antecedents (here only one) to consequents, John killed Peter with a knife because Peter murdered John's father . Innerese can be constructed from English You generally do not have to ever construct Innerese yourself. Genesis does it for you by translating from English using Genesis Translator: String sentence = \"John marries Mary because John loves money\"; Translator translator = Translator.getTranslator(); Entity entity = translator.translate(sentence); Mark.say(entity); The results: >>> (seq semantic-interpretation (rel cause (seq conjuction (rel love (ent john-93) (seq roles (fun object (ent money-103))))) (rel marry (ent john-93) (seq roles (fun object (ent mary-100)))))) Innerese can be externalized into English Genesis also features an English generator. The following thus produces the same English that is provided: Generator generator = Generator.getGenerator(); Mark.say(generator.generate(translator.translate(sentence).getElements().get(0))); The results: John marries Mary because John loves money. Innerese can be constructed using constructors and JFactory To construct an Innerese frame yourself based on the above definitions can be tedious and error prone. Fortunately there are convenience constructors that help. For example, The following shows how to create a role frame and how to add an additional role to an existing role frame: Relation rf = Constructors.makeRoleFrame(John, \"kill\"); Mark.say(rf); rf = Constructors.makeRoleFrame(John, \"kill\", Peter); Mark.say(rf); rf = Constructors.addRole(rf, \"with\", knife); Mark.say(rf); --> >>> (rel kill (ent John-14) (seq roles)) >>> (rel kill (ent John-14) (seq roles (fun object (ent Peter-15)))) >>> (rel kill (ent John-14) (seq roles (fun object (ent Peter-15)) (fun with (ent knife-17)))) The following shows how to create a role frame involving a path object: Entity tree = new Entity(\"tree\"); // Create a place relative to entity Function place = JFactory.createPlace(\"top\", tree); // Create a path element using place Function pathElement = JFactory.createPathElement(\"from\", place); // Create a path using path element Sequence path = JFactory.createPath(); path.addElement(pathElement); // reate a trajectory using Use path Entity trajectory = JFactory.createTrajectory(bird, \"fly\", path); // Create another path element Function origin = JFactory.createPathElement(\"to\", JFactory.createPlace(\"at\", new Entity(\"rock\"))); // Add it to the path JFactory.addPathElement(path, origin); // Have a look Mark.say(\"Amended trajectory role frame: \" + trajectory); (rel fly (ent bird-16) (seq roles (fun object (seq path (fun from (fun top (ent tree-44))) (fun to (fun at (ent rock-71))))))) This version is edited by Zhutian Yang, on 5 August 2019 An older version is authored by Patrick H. Winston, in May 2015","title":"Representation - Innerese"},{"location":"innerese/#innerese","text":"Innerese is the semantic structure used by Genesis System. It is based on what linguists call \"thematic role frames,\" or role frames for short. There are four classes of Innerese frames: The Entity class. A entity is usually a physical physical object. (So called so as not to conflict with Java\u2019s Object class) The Function class. A function suggests the thematic role served by certain frame. The Relation class. A relation indicates how one frame is connected to another frame. The Sequence class. A sequence contains any number of frames. The class heritage is: Entity __|__ / \\ function sequence | relation A Entity instance has no internal structure. Function , Relation , and Sequence consists of nested sequences of frames.","title":"Innerese"},{"location":"innerese/#the-entity-class","text":"The most fundamental class is the Entity class. Every instance of Entity has a unique name and bundle of threads. Because entities have threads, so do functions, relations, and sequences. Instances of Entity has no internal structure. To create a new entity, identified as both a ball and a baseball, you execute the following: Entity x = new Entity (\"ball\"); x.addType(\"baseball\"); Then, you can inspect the result via print statements: Mark.say(x) Mark.say(\"----\") Mark.say(x.toXML); The results: >>> (ent baseball-0) >>> ---- >>> <entity> <name>baseball-0</name> <bundle><thread>entity ball baseball</thread></bundle> </entity> The first thread of possibly many threads in the thread bundle is considered the primed thread. Whenever you add a type to a entity, using the addType method, that new type goes to the end of the primed thread. The isA predicate tests for class membership by checking all the threads. Hence x.isA(\"ball\") returns true , but x.isA(\"person\") returns false .","title":"The Entity class"},{"location":"innerese/#the-function-class","text":"The Function class represents Jackendoff\u2019s places and path elements. The Function class provides getSubject and setSubject accessors. The subject is to be filled with an instance of Entity or its subclass. To construct a function that represents the top of a table: Entity e = new Entity(\"table\"); Function f = new Function(\"top\", e); Mark.say(f); Mark.say(f.getSubject()); The results: >>> (fun top (ent table-1)) >>> (ent table-1)","title":"The Function class"},{"location":"innerese/#the-relation-class","text":"The Relation class simply adds an object slot to the Function class, with getObject and setObject accessors. Entity d = new Entity(\"door\"); Entity w = new Entity(\"window\"); Relation r = new Relation(\"between\", d, w); Mark.say(r); Mark.say(r.getSubject()); Mark.say(r.getObject()); The results: >>> (rel between (ent door-4) (ent window-5)) >>> (ent door-4) >>> (ent window-5)","title":"The Relation class"},{"location":"innerese/#the-sequence-class","text":"An Innerese representation of a sentence may consists of a sequence of relations. A relation may exists between an entity and a sequence of functions. Sequences can appear when Genesis produces role frames from English. For example, Given John killed Peter with a knife , Genesis produces a sequence containing two roles, one for the object, Peter, and one for the instrument, the knife. Sequence roles = new Sequence(\"roles\"); roles.addElement(new Function(\"object\", new Entity(\"Peter\"))); roles.addElement(new Function(\"with\", new Entity(\"knife\"))); Relation k = new Relation(\"kill\", new Entity(\"John\"), roles); Mark.say(roles); Mark.say(k); The results: >>> (seq roles (fun object (ent Peter-8)) (fun with (ent knife-10))) >>> (rel kill (ent John-12) (seq roles (fun object (ent Peter-8)) (fun with (ent knife-10))))","title":"The Sequence class"},{"location":"innerese/#innerese-is-an-implementation-of-role-frames","text":"Much of what Genesis reads ends up in what linguists call thematic role frames, role frames for short, which consist of an actor along with an act or property and optionally various entities that fill varous roles in the act. Thus, in John killed Peter with a knife , John is the actor , kill is the act , and Peter is the object . The knife entity, marked by a with preposition, fills what linguists would call the instrument role. In Genesis, role frames are implemented thusly: the actor entity is the subject ( John ) of a relation, whose type indicates the act or property involved ( kill ). All the role fillers, such as the object and instrument roles, are collected into a sequence that becomes the object of the relation. Each role mentioned in the sequence is embedded in a function indicating something about the role played. For example, the object role is embedded in an object function; the instrument role is embedded in the with function.","title":"Innerese is an implementation of Role frames."},{"location":"innerese/#innerese-can-be-visualized-as-nested-frames","text":"The printed linear form of entities, functions, relations and sequences is far from transparent. Accordingly, when such instances are presented in a GUI they appear in a form conceived by Keith Bonawitz. Here is a Bonowitz rendering of the role frame for John killed Peter with a knife . Note the color coding: entities in gray, functions in blue, relatioins in red, sequences in black. Also note that when you hove over various parts of the diagram, you see the various threads Genesis associates with each entity. Next, you see a more complicated example in which two role frames are embedded in a stucture that ties antecedents (here only one) to consequents, John killed Peter with a knife because Peter murdered John's father .","title":"Innerese can be visualized as nested \"frames\""},{"location":"innerese/#innerese-can-be-constructed-from-english","text":"You generally do not have to ever construct Innerese yourself. Genesis does it for you by translating from English using Genesis Translator: String sentence = \"John marries Mary because John loves money\"; Translator translator = Translator.getTranslator(); Entity entity = translator.translate(sentence); Mark.say(entity); The results: >>> (seq semantic-interpretation (rel cause (seq conjuction (rel love (ent john-93) (seq roles (fun object (ent money-103))))) (rel marry (ent john-93) (seq roles (fun object (ent mary-100))))))","title":"Innerese can be constructed from English"},{"location":"innerese/#innerese-can-be-externalized-into-english","text":"Genesis also features an English generator. The following thus produces the same English that is provided: Generator generator = Generator.getGenerator(); Mark.say(generator.generate(translator.translate(sentence).getElements().get(0))); The results: John marries Mary because John loves money.","title":"Innerese can be externalized into English"},{"location":"innerese/#innerese-can-be-constructed-using-constructors-and-jfactory","text":"To construct an Innerese frame yourself based on the above definitions can be tedious and error prone. Fortunately there are convenience constructors that help. For example, The following shows how to create a role frame and how to add an additional role to an existing role frame: Relation rf = Constructors.makeRoleFrame(John, \"kill\"); Mark.say(rf); rf = Constructors.makeRoleFrame(John, \"kill\", Peter); Mark.say(rf); rf = Constructors.addRole(rf, \"with\", knife); Mark.say(rf); --> >>> (rel kill (ent John-14) (seq roles)) >>> (rel kill (ent John-14) (seq roles (fun object (ent Peter-15)))) >>> (rel kill (ent John-14) (seq roles (fun object (ent Peter-15)) (fun with (ent knife-17)))) The following shows how to create a role frame involving a path object: Entity tree = new Entity(\"tree\"); // Create a place relative to entity Function place = JFactory.createPlace(\"top\", tree); // Create a path element using place Function pathElement = JFactory.createPathElement(\"from\", place); // Create a path using path element Sequence path = JFactory.createPath(); path.addElement(pathElement); // reate a trajectory using Use path Entity trajectory = JFactory.createTrajectory(bird, \"fly\", path); // Create another path element Function origin = JFactory.createPathElement(\"to\", JFactory.createPlace(\"at\", new Entity(\"rock\"))); // Add it to the path JFactory.addPathElement(path, origin); // Have a look Mark.say(\"Amended trajectory role frame: \" + trajectory); (rel fly (ent bird-16) (seq roles (fun object (seq path (fun from (fun top (ent tree-44))) (fun to (fun at (ent rock-71))))))) This version is edited by Zhutian Yang, on 5 August 2019 An older version is authored by Patrick H. Winston, in May 2015","title":"Innerese can be constructed using constructors and JFactory"},{"location":"mental-model/","text":"Mental Models A mental model is a representation of the surrounding world, the relationships between its various parts, and a person's intuitive perception about his or her own acts and their consequences. Johnson-Laird (1983) thinks that human reasoning depends on mental models, instead of on logical forms. In this view, mental models can be constructed from perception, imagination, or the comprehension of discourse. See book Mental Models: Towards a Cognitive Science of Language, Inference, and Consciousness . See here for more reference Wiki: Mental Models . Mental models in Genesis serve several purposes: have the story read by readers with different sets of rules and concepts Demo: Allegiance differences in interpretation Demo: Culture Difference in Interpreting Macbeth model how different story actors view the events in the story Demo: Three Perceptions about Love ) augment the reader\u2019s standard rules for particular story actors. Corpora: See Personalities for a summary of existing personalities in Genesis corpus. enable different readers to see some but not necessarily all the story elements. enable the reader to have separate mental models of how an actor acts and how he thinks (because the actor may, for example, act viciously but view himself as kind) Demo: Allegiance differences in interpretation In corpora/stories/Cyberwar/Estonia2 common.txt , We see the only difference between the two mental models is who is the ally. Estonia and Russia are characters. Estonia is a country. Russia is a country. First perspective. Start story titled \"Estonia/Aggression\". Estonia is my ally. Second perspective. Start story titled \"Estonia/Lesson\". Russia is my ally. Both Perspectives. I am a person. Show both perspectives. Both perspectives. Insert file Estonia plot. That will trigger two different concept patterns defined in corpora/stories/Cyberwar/Estonia reflective knowledge.txt : I am a person. xx is an entity. yy is a entity. Start description of \"Aggression of a bully\". xx is my ally. xx's angering yy leads to yy's harming xx. The end. Start description of \"Teaching a lesson\". yy is my ally. xx's angering yy leads to yy's harming xx. The end. The resulting Elaboration graphs can be seen by running Demonstrations > Allegiance differences in interpretation in Genesis GUI: Demo: Three Perceptions about Love Here, we will see an example of how to use mental models to model how one actor thinks, how another actor thinks he thinks, and how the reader thinks. The file is corpora/stories/MentalModel demos/Mental model sample.txt . Note that you might need to run the file twice to see the personality-x files read by Geneis. ... Setting the stage To introduce several idioms of general use, let's look at one example. It opens with standard lines that clear memory, establish GUI characteristics, and establish classifications for various entities: Start experiment. Set right panel to mental models. xx, yy, and zz are persons. John, Mary, and Peter are persons. Next comes the lines that supply the rules and concepts to the mental model that determines how the reader thinks: // Rules added to reader\u2019s thinking mental model Insert file General commonsense knowledge. // Concepts added to reader\u2019s thinking mental model Insert file General reflective knowledge. In the examples to follow, we will use the asserted rules. We will use a locally defined concept: Start description of \"Romantic love\". xx\u2019s loving yy leads to xx\u2019s being romantic. The end. ... Identify the personality traits Now, various personality traits are defined by idiom: personality-a is a kind of personality trait. personality-b is a kind of personality trait. personality-c is a kind of personality trait. Each such line creates a mental model using the file with a corresponding name, such as personality-a.txt , placed in corpora/stories/Personalities/ . Note that mental models have a boarder definition than personalities. The rules, concepts, and actions in a mental model can be typical of the personality, or the culture, or the gender, or the age. ... Define the personality traits The mental model files may include typical rules and concepts, as in personality-a.txt : xx and yy are persons. // A rule associated with the personality type. If xx loves yy then yy loves xx. // A concept associated with the personality type. Start description of \"Reciprocated love\". xx\u2019s loving yy leads to yy\u2019s loving xx. The end. // A story optionally containing typical actions. Start story titled \"Personality A\". The end. And the personality-b.txt file contains only a rule: xx and yy are persons. If xx loves yy then xx is romantic. Start story titled \"Personality B\". The end. The personality-c.txt file containt a typical action as well as a rule and a concept. Typical actions look like elements in a story. Evidently, people with this personality type are associated with crying and laughing. xx and yy are persons. If xx loves yy, then xx must be crazy. Start description of \"Crazy love\". yy is a person. xx\u2019s being crazy leads to xx\u2019s loving yy. The end. Start story titled \"Personality C\". x cries. x laughs. The end. ... What does John thinks Now back to the story. As usual, the story is started with a title-specifying idiom: Start story titled \"Mental model testing\". Next comes a line that does a lot of work. - First, it creates a new thinking mental model that captures how John will read the story elements that John sees. - Second, it transfers all the current rules and concepts in the reader\u2019s thinking mental model to John\u2019s thinking mental model. - Third, it initiates the presentation of all story elements to John\u2019s thinking mental model as well as to the thinking mental model of the reader. John enters. The mental model of the reader may not fully characterize how John thinks, so the next sentence idiomatically arranges for the rules and concepts in John to be augmented by rules and concepts from the personality-a mental model. John thinks like personality-a. Thus, John\u2019s thinking mental model has a rule, If xx loves yy then yy loves xx from personality-a and two concepts, the original Romantic love from the reader\u2019s thinking mental model and the new Reciprocated love from personality-a . The next sentence goes into the reader\u2019s mental model, where there is no rule associated with it, and also into John\u2019s mental model, where it triggers the If xx loves yy then yy loves xx rule, which makes love always reciprocated. John loves Mary. The result is shown in figure below: The next sentence idiomatically prevents John from seeing subsequent sentences in the story. There may be many enters and exits . John exits. ... What does Mary think John thinks The next sentence idiomatically creates a thinking mental model for Mary as if the sentence were Mary enters; however, sentences do not begin to flow into Mary\u2019s thinking mental model. Construct a mental model for Mary. Now, because there is a thinking mental model for Mary, all sentences starting with Mary believes... flow into Mary\u2019s thinking mental model, but not the reader\u2019s mental model. Thus, the embedded phrase John is personality-b , tells Mary\u2019s thinking mental model to consider John to act in accordance with personality-b . Mary believes John is personality-b. That is, John\u2019s acting mental model in Mary\u2019s thinking model includes not only the rules and concepts generally available to Mary, but also those associated specifically with John\u2019s acting model, which includes the rules and concepts from personality-b : Now, if John is involved in a loving act, the loving person is considered romantic because John\u2019s acting mental model in Mary\u2019s thinking mental model includes a personality-b rule. Accordingly, as shown in figure below. Mary\u2019s thinking mental model has an acting mental model for John that supplies the romantic deduction. Because the next sentence has John in a loving relationship, Mary becomes romantic in Mary\u2019s mental model. Note, however, that there is no conclusion that John loves Mary because the governing rule is only in John\u2019s thinking mental model, not in Mary\u2019s and not in the readers. Also, there is no conclusion that Susan is romantic because the sentence involving Susan does not involve John; hence, there is no use of rules in John\u2019s acting mental model. Mary believes Mary loves John. Mary believes Susan loves Peter. ... What do you think I cry. Next, the reader cries, which suggests that the reader has type personality-c . Rules and concepts from that personality type now augment those previously used by the reader. Note that if the sentence were Mary cries , the augmentation would be limited to sentences involving Mary. Now the personality-c abduction rule is activated by the following sentence, because the reader now has the rule If xx loves yy, then xx must be crazy from personality-c. Peter loves Mary. Finally, the story ends with The end. . Figure below shows the complete story analysis, with rules and concepts involved in acting mental models and thinking mental. In summary, each mental model has a different concept. The reader sees Crazy love , made available to the reader via personality-c ; John sees Reciprocated love , made available to John via the transfer from personality-a ; Mary sees Romantic love , made available to Mary when Mary\u2019s thinking mental model was created by transfer from the reader\u2019s thinking mental model. ... Nuance Note that the rules associated with an acting mental model are actuated whenever the corresponding actor appears anywhere in an entity because personality traits are not only about what someone tends to do (vicious) but also about what gets done to them (meek). Accordingly, to be sure a rule works the way you want in the description of a personality trait, you may want to indicate which person has the trait, as in: If xx is vicious and yy harms xx, then xx kills yy. Otherwise, without the xx is vicious antecedent, if John is vicious and Paul is meek, then John harms Paul would cause Paul, the meek one, to kill John. This version is edited by Zhutian Yang, on 10 August 2019 An older version is authored by Patrick H. Winston, in 3 July 2015","title":"Mental Models"},{"location":"mental-model/#mental-models","text":"A mental model is a representation of the surrounding world, the relationships between its various parts, and a person's intuitive perception about his or her own acts and their consequences. Johnson-Laird (1983) thinks that human reasoning depends on mental models, instead of on logical forms. In this view, mental models can be constructed from perception, imagination, or the comprehension of discourse. See book Mental Models: Towards a Cognitive Science of Language, Inference, and Consciousness . See here for more reference Wiki: Mental Models . Mental models in Genesis serve several purposes: have the story read by readers with different sets of rules and concepts Demo: Allegiance differences in interpretation Demo: Culture Difference in Interpreting Macbeth model how different story actors view the events in the story Demo: Three Perceptions about Love ) augment the reader\u2019s standard rules for particular story actors. Corpora: See Personalities for a summary of existing personalities in Genesis corpus. enable different readers to see some but not necessarily all the story elements. enable the reader to have separate mental models of how an actor acts and how he thinks (because the actor may, for example, act viciously but view himself as kind)","title":"Mental Models"},{"location":"mental-model/#demo-allegiance-differences-in-interpretation","text":"In corpora/stories/Cyberwar/Estonia2 common.txt , We see the only difference between the two mental models is who is the ally. Estonia and Russia are characters. Estonia is a country. Russia is a country. First perspective. Start story titled \"Estonia/Aggression\". Estonia is my ally. Second perspective. Start story titled \"Estonia/Lesson\". Russia is my ally. Both Perspectives. I am a person. Show both perspectives. Both perspectives. Insert file Estonia plot. That will trigger two different concept patterns defined in corpora/stories/Cyberwar/Estonia reflective knowledge.txt : I am a person. xx is an entity. yy is a entity. Start description of \"Aggression of a bully\". xx is my ally. xx's angering yy leads to yy's harming xx. The end. Start description of \"Teaching a lesson\". yy is my ally. xx's angering yy leads to yy's harming xx. The end. The resulting Elaboration graphs can be seen by running Demonstrations > Allegiance differences in interpretation in Genesis GUI:","title":"Demo: Allegiance differences in interpretation"},{"location":"mental-model/#demo-three-perceptions-about-love","text":"Here, we will see an example of how to use mental models to model how one actor thinks, how another actor thinks he thinks, and how the reader thinks. The file is corpora/stories/MentalModel demos/Mental model sample.txt . Note that you might need to run the file twice to see the personality-x files read by Geneis.","title":"Demo: Three Perceptions about Love"},{"location":"mental-model/#setting-the-stage","text":"To introduce several idioms of general use, let's look at one example. It opens with standard lines that clear memory, establish GUI characteristics, and establish classifications for various entities: Start experiment. Set right panel to mental models. xx, yy, and zz are persons. John, Mary, and Peter are persons. Next comes the lines that supply the rules and concepts to the mental model that determines how the reader thinks: // Rules added to reader\u2019s thinking mental model Insert file General commonsense knowledge. // Concepts added to reader\u2019s thinking mental model Insert file General reflective knowledge. In the examples to follow, we will use the asserted rules. We will use a locally defined concept: Start description of \"Romantic love\". xx\u2019s loving yy leads to xx\u2019s being romantic. The end.","title":"... Setting the stage"},{"location":"mental-model/#identify-the-personality-traits","text":"Now, various personality traits are defined by idiom: personality-a is a kind of personality trait. personality-b is a kind of personality trait. personality-c is a kind of personality trait. Each such line creates a mental model using the file with a corresponding name, such as personality-a.txt , placed in corpora/stories/Personalities/ . Note that mental models have a boarder definition than personalities. The rules, concepts, and actions in a mental model can be typical of the personality, or the culture, or the gender, or the age.","title":"... Identify the personality traits"},{"location":"mental-model/#define-the-personality-traits","text":"The mental model files may include typical rules and concepts, as in personality-a.txt : xx and yy are persons. // A rule associated with the personality type. If xx loves yy then yy loves xx. // A concept associated with the personality type. Start description of \"Reciprocated love\". xx\u2019s loving yy leads to yy\u2019s loving xx. The end. // A story optionally containing typical actions. Start story titled \"Personality A\". The end. And the personality-b.txt file contains only a rule: xx and yy are persons. If xx loves yy then xx is romantic. Start story titled \"Personality B\". The end. The personality-c.txt file containt a typical action as well as a rule and a concept. Typical actions look like elements in a story. Evidently, people with this personality type are associated with crying and laughing. xx and yy are persons. If xx loves yy, then xx must be crazy. Start description of \"Crazy love\". yy is a person. xx\u2019s being crazy leads to xx\u2019s loving yy. The end. Start story titled \"Personality C\". x cries. x laughs. The end.","title":"... Define the personality traits"},{"location":"mental-model/#what-does-john-thinks","text":"Now back to the story. As usual, the story is started with a title-specifying idiom: Start story titled \"Mental model testing\". Next comes a line that does a lot of work. - First, it creates a new thinking mental model that captures how John will read the story elements that John sees. - Second, it transfers all the current rules and concepts in the reader\u2019s thinking mental model to John\u2019s thinking mental model. - Third, it initiates the presentation of all story elements to John\u2019s thinking mental model as well as to the thinking mental model of the reader. John enters. The mental model of the reader may not fully characterize how John thinks, so the next sentence idiomatically arranges for the rules and concepts in John to be augmented by rules and concepts from the personality-a mental model. John thinks like personality-a. Thus, John\u2019s thinking mental model has a rule, If xx loves yy then yy loves xx from personality-a and two concepts, the original Romantic love from the reader\u2019s thinking mental model and the new Reciprocated love from personality-a . The next sentence goes into the reader\u2019s mental model, where there is no rule associated with it, and also into John\u2019s mental model, where it triggers the If xx loves yy then yy loves xx rule, which makes love always reciprocated. John loves Mary. The result is shown in figure below: The next sentence idiomatically prevents John from seeing subsequent sentences in the story. There may be many enters and exits . John exits.","title":"... What does John thinks"},{"location":"mental-model/#what-does-mary-think-john-thinks","text":"The next sentence idiomatically creates a thinking mental model for Mary as if the sentence were Mary enters; however, sentences do not begin to flow into Mary\u2019s thinking mental model. Construct a mental model for Mary. Now, because there is a thinking mental model for Mary, all sentences starting with Mary believes... flow into Mary\u2019s thinking mental model, but not the reader\u2019s mental model. Thus, the embedded phrase John is personality-b , tells Mary\u2019s thinking mental model to consider John to act in accordance with personality-b . Mary believes John is personality-b. That is, John\u2019s acting mental model in Mary\u2019s thinking model includes not only the rules and concepts generally available to Mary, but also those associated specifically with John\u2019s acting model, which includes the rules and concepts from personality-b : Now, if John is involved in a loving act, the loving person is considered romantic because John\u2019s acting mental model in Mary\u2019s thinking mental model includes a personality-b rule. Accordingly, as shown in figure below. Mary\u2019s thinking mental model has an acting mental model for John that supplies the romantic deduction. Because the next sentence has John in a loving relationship, Mary becomes romantic in Mary\u2019s mental model. Note, however, that there is no conclusion that John loves Mary because the governing rule is only in John\u2019s thinking mental model, not in Mary\u2019s and not in the readers. Also, there is no conclusion that Susan is romantic because the sentence involving Susan does not involve John; hence, there is no use of rules in John\u2019s acting mental model. Mary believes Mary loves John. Mary believes Susan loves Peter.","title":"... What does Mary think John thinks"},{"location":"mental-model/#what-do-you-think","text":"I cry. Next, the reader cries, which suggests that the reader has type personality-c . Rules and concepts from that personality type now augment those previously used by the reader. Note that if the sentence were Mary cries , the augmentation would be limited to sentences involving Mary. Now the personality-c abduction rule is activated by the following sentence, because the reader now has the rule If xx loves yy, then xx must be crazy from personality-c. Peter loves Mary. Finally, the story ends with The end. . Figure below shows the complete story analysis, with rules and concepts involved in acting mental models and thinking mental. In summary, each mental model has a different concept. The reader sees Crazy love , made available to the reader via personality-c ; John sees Reciprocated love , made available to John via the transfer from personality-a ; Mary sees Romantic love , made available to Mary when Mary\u2019s thinking mental model was created by transfer from the reader\u2019s thinking mental model.","title":"... What do you think"},{"location":"mental-model/#nuance","text":"Note that the rules associated with an acting mental model are actuated whenever the corresponding actor appears anywhere in an entity because personality traits are not only about what someone tends to do (vicious) but also about what gets done to them (meek). Accordingly, to be sure a rule works the way you want in the description of a personality trait, you may want to indicate which person has the trait, as in: If xx is vicious and yy harms xx, then xx kills yy. Otherwise, without the xx is vicious antecedent, if John is vicious and Paul is meek, then John harms Paul would cause Paul, the meek one, to kill John. This version is edited by Zhutian Yang, on 10 August 2019 An older version is authored by Patrick H. Winston, in 3 July 2015","title":"... Nuance"},{"location":"microstory/","text":"Microstory","title":"Microstory"},{"location":"microstory/#microstory","text":"","title":"Microstory"},{"location":"past/","text":"Past of Genesis System Terms Story refers to a sequence of time ordered story elements (Matthew Paul Fay, 2012) any related sequence of events; a traditional narrative structure is not necessary (Bryan Michael Williams, 2017)","title":"Past"},{"location":"past/#past-of-genesis-system","text":"","title":"Past of Genesis System"},{"location":"past/#terms","text":"","title":"Terms"},{"location":"past/#story-refers-to","text":"a sequence of time ordered story elements (Matthew Paul Fay, 2012) any related sequence of events; a traditional narrative structure is not necessary (Bryan Michael Williams, 2017)","title":"Story refers to"},{"location":"personalities/","text":"Example Personalities Here are the exiting personalities in Genesis Corpus: corpora/stories/Personalities/ I.txt included the patterns for inspecting the thinking process of Genesis system cultural personalities personal personalities I In this file, PHW was trying to construct concept patterns so that Genesis can recognize: * when conclusions are made * what it has found * how did it solve a problem So these are the important knowledge for demonstrating self-awareness, introspection, and explanation!!! I am a person. rr is a variable. ss is a variable. vv is a variable. xx is a person. Start description of \"Reached conclusion\". xx concludes rr. The end. Start description of \"Reached conclusion\". xx reached conclusion about rr. The end. Start description of \"Failed to reach conclusion\". xx does not concludes rr. The end. Start description of \"Failed to reach conclusion\". xx did not reach conclusion about rr. The end. ////////// Start description of \"X believes Y\". xx believes rr. The end. ll is a variable. mm is a variable. oo is a variable. vv is a variable. If I think about vv, then I exist. Start description of \"Cogito, ergo sum\". xx's thinking about vv leads to xx's existing. The end. Start description of \"Confirmation using belief\". xx's believing ll leads to xx's confirming mm. The end. Start description of \"Problem solved using search\". the path's leading from ll to mm leads to xx's solving oo. The end. Start description of \"Confirmation using search\". the path's leading from ll to mm leads to xx's confirming oo. The end. Start description of \"Note danger\". I conclude that xx is lonely. The end. Start description of \"Found means\". I succeed with \"I find recipe for ll\". The end. Start description of \"Found steps\". I find recipe for ll. The end. Start description of \"Found consequences\". I search forward from ll. The end. Start description of \"Found causes\". // I explain ll. My explaining ll leads to my solving yy. The end. // ------------------------------------------------------ Used in paper // If xx thinks about ll, then xx be. If xx believes ll then xx thinks about ll. Start description of \"Noted danger\". I found \"xx is lonely\". The end. /* Start description of \"Solved subproblem\". I solved rr. I solved ss. rr must not equal ss. The end. */ // Start description of \"Problem solved using belief\". // My succeeding with \"I find vv in my beliefs\" leads to my solving \"did I believe vv\". // The end. Start description of \"Problem solved using belief\". My succeeding with \"You establish that i believe vv\" leads to my solving rr. The end. Start description of \"Solved problem using search\". My succeeding with \"You establish that a path leads from ll to mm\" leads to my solving ss. The end. Personality Demo Both perspectives. Show both perspectives. xx is a person. yy is a person. aa is an action. // If xx kills yy then xx harms yy. If xx harms yy, then yy becomes unhappy. If xx dislikes yy and xx avoids yy, then xx becomes happy. If xx attacks yy, then yy becomes unhappy. Start description of \"Negative emotional impact\". xx's performing aa leads to yy's becoming unhappy. The end. Start description of \"Positive emotional impact\". xx's performing aa leads to yy's becoming happy. The end. First perspective. \"Nasty\" is a kind of personality trait. \"Shy\" is a kind of personality trait. \"Vicious\" is a kind of personality trait. Start story titled \"Tragedy of traits\". Second perspective. Start story titled \"Normal world\". Both perspectives. Patrick is a person. Scylla is a person. Charybdis is a person. Patrick is nasty. Charybdis is shy. Scylla is vicious. Scylla attacks Patrick. The end. So here is what happened ... please be aware not to laugh too loudly. ... Nasty xx is a person. yy is a person. If yy is nasty and xx is a person, then xx dislikes yy. ... Shy xx is a person. yy is a person. If xx dislikes yy and xx is shy then xx avoids yy. ... Vicious xx is a person. yy is a person. aa is an action. // If xx dislikes yy and xx is vicious then xx wants to harm yy. // If xx wants to harm yy and xx is vicious, then xx may attack yy. xx may kill yy because xx is vicious and xx dislikes yy. xx may kill yy because xx is vicious and yy angers xx. xx may kill yy because xx wants to kill yy and xx is vicious. // xx may kill yy because xx wants to harm yy and xx is vicious. Start description of \"Joy in enemy's suffering\". xx's disliking yy leads to yy's becoming unhappy. The end. Patrick is a person. Boris is a person. Start story titled \"Vicious person's characteristics\". Patrick assaults Boris. Patrick attacks Boris. Patrick insults Boris. Patrick kills Boris. Patrick dislikes Boris. The end. Other Common Personalities Each one of them is short for testing. ... Ambitious xx is a person. // this is a typical concept pattern Start description of \"Leadership achieved\". xx is an entity. xx's becoming ruler leads to xx's becoming happy. The end. ... Corrupt XX is a person. YY is a person. If XX is corrupt and YY is a person, then XX may harm YY. ... Crazy xx is a person. if xx becomes crazy, then xx may kill xx. ... Evil ww, xx, yy, and zz are persons. YY murders WW because YY wants to become king and because WW is the king and because YY is WW's successor. ... Greedy xx is a person. yy is a person. zz is a person. aa is an action. if xx is greedy and xx is yy's wife, then xx may persuade yy to want to become king. Start description of \"Tragic greed\". xx is yy's relation. zz is a person. xx's being greedy leads to zz's harming yy. The end. Boris is a person. Start story titled \"Greedy person's characteristics\". Boris loves Money. The end. ... Insane Start commonsense knowledge. // we seemed no longer need this sentence six years ago xx is a person. yy is a person. If xx is insane, then xx may kill xx. If xx is insane, then xx may kill yy. ... Machiavellian WW, XX, YY, and ZZ are persons. Patrick is a person. If XX is an enemy of ZZ and YY is an enemy of ZZ, then XX may be a friend of YY. If XX is an enemy of ZZ and YY is an enemy of ZZ, then YY may be a friend of XX. Start story titled \"Machiavellian person's characteristics\". Patrick protects himself. The end. ... Violent xx is a person. yy is a person. If xx is violent, then xx may kill yy. If xx becomes violent, then xx may kill yy. ... Wizard WW, XX, YY, and ZZ are persons. If xx angers yy, then yy may kill xx. YY may murder WW because YY wants to become king and because WW is the king and because YY is WW's successor. Culture personalities Here are the eastern, western, and asian personalities. ... Eastern Insert file Eastern commonsense knowledge. Start story titled \"Eastern person's characteristics\". The end. ... Western Insert file Western commonsense knowledge. Start story titled \"Western person's characteristics\". The end. ... Asian This is used for the Lu murder story. XX is a person. YY is a person. SS is an entity. TT is an entity. // Rules and concept pattern moved in from Eastern Commonsense1 // corrupt society If SS is individualistic then SS is corrupt. If XX studies in SS and SS is corrupt, then XX becomes corrupt. // violence glorifying society. If SS's media glorifies violence, then SS glorifies violence. If XX comes from TT and XX studies in SS and SS glorifies violence, then XX becomes vicious. If XX feels frustrated, then XX becomes angry. If XX becomes vicious and XX becomes angry, then XX becomes murderous. // murderer personality. If XX becomes corrupt and XX becomes angry and XX feels frustrated then XX becomes murderous. If XX becomes corrupt and XX feels dishonored then XX becomes murderous. If XX becomes corrupt and XX feels victimized then XX becomes murderous. // If XX becomes violent and XX becomes angry and XX feels dishonored then XX becomes murderous. If XX becomes corrupt and XX becomes violent and XX feels dishonored then XX becomes murderous. // suicidal personality If XX is lonely and XX feels frustrated then XX becomes suicidal. If xx becomes suicidal then xx may kill xx. Start description of \"Murderous influence\". ss's being individualistic leads to xx's killing yy. The end. Start description of \"Murderous influence\". ss's glorifying violence leads to xx's killing yy. The end. America is a country. // A story optionally containing typical actions of an Asian person Start story titled \"Asian person's actions\". I believe America is individualistic. I believe America glorifies violence. I believe America's media glorifies violence. I believe America is rich. The end. Four year old Caroline onoff wrote these files in 2018 VV is a thing. WW is a person. XX is a person. YY is a physical-thing. ZZ is a psych-thing. AA is a physical-thing. BB is a psych-thing. // UNCOMMENT BELOW //If WW contacts VV and WW has a physical-sickness, then WW may have a physical-sickness because WW runs in VV. //If WW contacts VV and WW becomes sick, then WW may become sick because WW runs in VV. //If WW runs in VV and WW becomes sick, then XX believes WW becomes sick because WW runs in VV. //If WW contacts VV, then WW may have physical-sickness. // EXPAND THIS FUNCTIONALITY If XX contacts VV, then XX may have itchy spots. //WW's contacting VV leads to WW's having itchy spots. //becoming sick. //If WW eats VV, then WW may have physical-sickness. If WW has a negative-psych-action, then WW may have physical-sickness. //WW may have physical-sickness because WW has negative-psych-action. //WW may have physical-sickness because WW thinks about VV. // and WW has a negative-psych-action. //WW may have physical-sickness because WW has a negative-psych-action because WW thinks about VV. Start story titled \"Four-year-old's characteristics\". The end.","title":"Personalities"},{"location":"personalities/#example-personalities","text":"Here are the exiting personalities in Genesis Corpus: corpora/stories/Personalities/ I.txt included the patterns for inspecting the thinking process of Genesis system cultural personalities personal personalities","title":"Example Personalities"},{"location":"personalities/#i","text":"In this file, PHW was trying to construct concept patterns so that Genesis can recognize: * when conclusions are made * what it has found * how did it solve a problem So these are the important knowledge for demonstrating self-awareness, introspection, and explanation!!! I am a person. rr is a variable. ss is a variable. vv is a variable. xx is a person. Start description of \"Reached conclusion\". xx concludes rr. The end. Start description of \"Reached conclusion\". xx reached conclusion about rr. The end. Start description of \"Failed to reach conclusion\". xx does not concludes rr. The end. Start description of \"Failed to reach conclusion\". xx did not reach conclusion about rr. The end. ////////// Start description of \"X believes Y\". xx believes rr. The end. ll is a variable. mm is a variable. oo is a variable. vv is a variable. If I think about vv, then I exist. Start description of \"Cogito, ergo sum\". xx's thinking about vv leads to xx's existing. The end. Start description of \"Confirmation using belief\". xx's believing ll leads to xx's confirming mm. The end. Start description of \"Problem solved using search\". the path's leading from ll to mm leads to xx's solving oo. The end. Start description of \"Confirmation using search\". the path's leading from ll to mm leads to xx's confirming oo. The end. Start description of \"Note danger\". I conclude that xx is lonely. The end. Start description of \"Found means\". I succeed with \"I find recipe for ll\". The end. Start description of \"Found steps\". I find recipe for ll. The end. Start description of \"Found consequences\". I search forward from ll. The end. Start description of \"Found causes\". // I explain ll. My explaining ll leads to my solving yy. The end. // ------------------------------------------------------ Used in paper // If xx thinks about ll, then xx be. If xx believes ll then xx thinks about ll. Start description of \"Noted danger\". I found \"xx is lonely\". The end. /* Start description of \"Solved subproblem\". I solved rr. I solved ss. rr must not equal ss. The end. */ // Start description of \"Problem solved using belief\". // My succeeding with \"I find vv in my beliefs\" leads to my solving \"did I believe vv\". // The end. Start description of \"Problem solved using belief\". My succeeding with \"You establish that i believe vv\" leads to my solving rr. The end. Start description of \"Solved problem using search\". My succeeding with \"You establish that a path leads from ll to mm\" leads to my solving ss. The end.","title":"I"},{"location":"personalities/#personality-demo","text":"Both perspectives. Show both perspectives. xx is a person. yy is a person. aa is an action. // If xx kills yy then xx harms yy. If xx harms yy, then yy becomes unhappy. If xx dislikes yy and xx avoids yy, then xx becomes happy. If xx attacks yy, then yy becomes unhappy. Start description of \"Negative emotional impact\". xx's performing aa leads to yy's becoming unhappy. The end. Start description of \"Positive emotional impact\". xx's performing aa leads to yy's becoming happy. The end. First perspective. \"Nasty\" is a kind of personality trait. \"Shy\" is a kind of personality trait. \"Vicious\" is a kind of personality trait. Start story titled \"Tragedy of traits\". Second perspective. Start story titled \"Normal world\". Both perspectives. Patrick is a person. Scylla is a person. Charybdis is a person. Patrick is nasty. Charybdis is shy. Scylla is vicious. Scylla attacks Patrick. The end. So here is what happened ... please be aware not to laugh too loudly.","title":"Personality Demo"},{"location":"personalities/#nasty","text":"xx is a person. yy is a person. If yy is nasty and xx is a person, then xx dislikes yy.","title":"... Nasty"},{"location":"personalities/#shy","text":"xx is a person. yy is a person. If xx dislikes yy and xx is shy then xx avoids yy.","title":"... Shy"},{"location":"personalities/#vicious","text":"xx is a person. yy is a person. aa is an action. // If xx dislikes yy and xx is vicious then xx wants to harm yy. // If xx wants to harm yy and xx is vicious, then xx may attack yy. xx may kill yy because xx is vicious and xx dislikes yy. xx may kill yy because xx is vicious and yy angers xx. xx may kill yy because xx wants to kill yy and xx is vicious. // xx may kill yy because xx wants to harm yy and xx is vicious. Start description of \"Joy in enemy's suffering\". xx's disliking yy leads to yy's becoming unhappy. The end. Patrick is a person. Boris is a person. Start story titled \"Vicious person's characteristics\". Patrick assaults Boris. Patrick attacks Boris. Patrick insults Boris. Patrick kills Boris. Patrick dislikes Boris. The end.","title":"... Vicious"},{"location":"personalities/#other-common-personalities","text":"Each one of them is short for testing.","title":"Other Common Personalities"},{"location":"personalities/#ambitious","text":"xx is a person. // this is a typical concept pattern Start description of \"Leadership achieved\". xx is an entity. xx's becoming ruler leads to xx's becoming happy. The end.","title":"... Ambitious"},{"location":"personalities/#corrupt","text":"XX is a person. YY is a person. If XX is corrupt and YY is a person, then XX may harm YY.","title":"... Corrupt"},{"location":"personalities/#crazy","text":"xx is a person. if xx becomes crazy, then xx may kill xx.","title":"... Crazy"},{"location":"personalities/#evil","text":"ww, xx, yy, and zz are persons. YY murders WW because YY wants to become king and because WW is the king and because YY is WW's successor.","title":"... Evil"},{"location":"personalities/#greedy","text":"xx is a person. yy is a person. zz is a person. aa is an action. if xx is greedy and xx is yy's wife, then xx may persuade yy to want to become king. Start description of \"Tragic greed\". xx is yy's relation. zz is a person. xx's being greedy leads to zz's harming yy. The end. Boris is a person. Start story titled \"Greedy person's characteristics\". Boris loves Money. The end.","title":"... Greedy"},{"location":"personalities/#insane","text":"Start commonsense knowledge. // we seemed no longer need this sentence six years ago xx is a person. yy is a person. If xx is insane, then xx may kill xx. If xx is insane, then xx may kill yy.","title":"... Insane"},{"location":"personalities/#machiavellian","text":"WW, XX, YY, and ZZ are persons. Patrick is a person. If XX is an enemy of ZZ and YY is an enemy of ZZ, then XX may be a friend of YY. If XX is an enemy of ZZ and YY is an enemy of ZZ, then YY may be a friend of XX. Start story titled \"Machiavellian person's characteristics\". Patrick protects himself. The end.","title":"... Machiavellian"},{"location":"personalities/#violent","text":"xx is a person. yy is a person. If xx is violent, then xx may kill yy. If xx becomes violent, then xx may kill yy.","title":"... Violent"},{"location":"personalities/#wizard","text":"WW, XX, YY, and ZZ are persons. If xx angers yy, then yy may kill xx. YY may murder WW because YY wants to become king and because WW is the king and because YY is WW's successor.","title":"... Wizard"},{"location":"personalities/#culture-personalities","text":"Here are the eastern, western, and asian personalities.","title":"Culture personalities"},{"location":"personalities/#eastern","text":"Insert file Eastern commonsense knowledge. Start story titled \"Eastern person's characteristics\". The end.","title":"... Eastern"},{"location":"personalities/#western","text":"Insert file Western commonsense knowledge. Start story titled \"Western person's characteristics\". The end.","title":"... Western"},{"location":"personalities/#asian","text":"This is used for the Lu murder story. XX is a person. YY is a person. SS is an entity. TT is an entity. // Rules and concept pattern moved in from Eastern Commonsense1 // corrupt society If SS is individualistic then SS is corrupt. If XX studies in SS and SS is corrupt, then XX becomes corrupt. // violence glorifying society. If SS's media glorifies violence, then SS glorifies violence. If XX comes from TT and XX studies in SS and SS glorifies violence, then XX becomes vicious. If XX feels frustrated, then XX becomes angry. If XX becomes vicious and XX becomes angry, then XX becomes murderous. // murderer personality. If XX becomes corrupt and XX becomes angry and XX feels frustrated then XX becomes murderous. If XX becomes corrupt and XX feels dishonored then XX becomes murderous. If XX becomes corrupt and XX feels victimized then XX becomes murderous. // If XX becomes violent and XX becomes angry and XX feels dishonored then XX becomes murderous. If XX becomes corrupt and XX becomes violent and XX feels dishonored then XX becomes murderous. // suicidal personality If XX is lonely and XX feels frustrated then XX becomes suicidal. If xx becomes suicidal then xx may kill xx. Start description of \"Murderous influence\". ss's being individualistic leads to xx's killing yy. The end. Start description of \"Murderous influence\". ss's glorifying violence leads to xx's killing yy. The end. America is a country. // A story optionally containing typical actions of an Asian person Start story titled \"Asian person's actions\". I believe America is individualistic. I believe America glorifies violence. I believe America's media glorifies violence. I believe America is rich. The end.","title":"... Asian"},{"location":"personalities/#four-year-old","text":"Caroline onoff wrote these files in 2018 VV is a thing. WW is a person. XX is a person. YY is a physical-thing. ZZ is a psych-thing. AA is a physical-thing. BB is a psych-thing. // UNCOMMENT BELOW //If WW contacts VV and WW has a physical-sickness, then WW may have a physical-sickness because WW runs in VV. //If WW contacts VV and WW becomes sick, then WW may become sick because WW runs in VV. //If WW runs in VV and WW becomes sick, then XX believes WW becomes sick because WW runs in VV. //If WW contacts VV, then WW may have physical-sickness. // EXPAND THIS FUNCTIONALITY If XX contacts VV, then XX may have itchy spots. //WW's contacting VV leads to WW's having itchy spots. //becoming sick. //If WW eats VV, then WW may have physical-sickness. If WW has a negative-psych-action, then WW may have physical-sickness. //WW may have physical-sickness because WW has negative-psych-action. //WW may have physical-sickness because WW thinks about VV. // and WW has a negative-psych-action. //WW may have physical-sickness because WW has a negative-psych-action because WW thinks about VV. Start story titled \"Four-year-old's characteristics\". The end.","title":"Four year old"},{"location":"problem-solver/","text":"Problem Solver","title":"Problem Solver"},{"location":"problem-solver/#problem-solver","text":"","title":"Problem Solver"},{"location":"recipe-learners/","text":"","title":"Recipe Learners"},{"location":"stories/","text":"How to write stories Each story to be processed by Genesis is written in one or more text files. Basic idioms Here is a simple story in corpora/samples/genesese.txt : Start experiment. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth murders duncan. The end. The result appears in the elaboration graph shown in figure below: The line Start experiment. is an idiom that tells Genesis to clear text boxes and memories from previous experiment out of story processors in preparation for reading a new story. The line Start story titled \"Tragedy of Macbeth\". is an idiom that tells Genesis that a story is about to be told and the name of the story. The line The end. is an idiom that tells Genesis that the story is concluded. To read such a file, you click on the Read button on the Genesis interface and navigate to your file, as shown in figure below: File reader idiom Naturally, you will want to assemble experiments using multiple files, perhaps one for common sense rules, another for concept patterns, yet another for the story. This is easy to arrange using the file reader idiom, as in the following examples. Note that.txtis assumed by the idiom processor: // Find and read file named \"General commonsense knowledge.txt\" Insert file General commonsense knowledge. // Find and read file named \"General commonsense knowledge.txt\" Insert file General reflective knowledge. But where are those files? Genesis does you a favor and looks around locally in your file structure to find them. If there are multiple files with the same name, you need to be careful, of course. Genesis will warn you that there are such name conflicts on the console, and pick one file from the alternatives, but you won\u2019t know if you ignore the console. Switch idioms Genesis has lots of switches, many of which can be set by idiom. At this writing, all the switches in the Subsystems panel, the Story summarizing panel, the Story persuasion panel, the Why questions panel, and the Presentation panel can be set by idiom, as suggested by the following examples. Set Show markup switch to true. Set Summarizer switch to false. See Switches for a list of existing switches. Text entry box idioms Another general purpose idiom primes the text entry box. For example, the following primes the text entry box with Make Macbeth be nice : Insert into text box: Make Macbeth be nice. You can put this anywhere in a file. Perspective idioms Genesis has two primary story processors, and various idioms tell Genesis where to direct the text and what to show on the user interface. Both perspectives. // Direct text to both story processors. First perspective. // Direct text to left-side story processor only. Second perspective. // Direct text to right-side story processor only. Show both perspectives. // Show both perspectives. Show first perspective. // Show left-side elaboration graph only. Show second perspective. // Show right-side elaboration graph only. See Demo for how different culture perspectives can be used in interpreting Macbeth. User interface idioms. The genesis user interface has three panes. The panel to display can be indicated under idiom control. For example: Set left panel to controls. Set right panel to mental models. Set bottom panel to elaboration graph. All the possibilities are exposed when you click on the three vertical bars on the top left of each pane. See Panes for a list of existing panes. Deprecated idioms You may see in files various idioms that were once useful, but now are ignored or replaced. For example: Insert file Start experiment The story processors used to be initialized by reading idioms from a file. Now, this idiom merely does the same thing as Start experiment which involves no file reading. Start commonsense knowledge. This idiom used to tell the user interface that the next lines of text were part of the common sense collection. This is now automatic and the idiom is ignored. Start reflective knowledge. This idiom used to tell the user interface that the next lines of text were part of the concept pattern collection. This is now automatic and the idiom is ignored. Comments Naturally, you will want to comment your work, just as you would for your code. You use the Java conventions, with a double slash, //, introducing a single line comment, and matched / and / pairs bracketing multiline comments: // The idiom for resetting story processor memory: Start experiment. /* A sample story, starting with an instance of the \"Start story titled...\" idiom and ending with an instance of the \"The end.\" idiom. */ Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macduff murders Duncan. The end. At the moment, you cannot nest / and / pairs. Scenes Ordinarily, if you write Boris insults Patrick in a story twice, it only shows up once because it is assumed to be the same insult. You can have it appear twice, however, by starting a sentence with \u201cThen, ...\u201d, which puts in a scene marker and allows the same innerese expression to appear more than once, as in this story, with the result shown in figure below. Start story titled \"Duplicates\". Boris insults Patrick. Boris insults Patrick again. Then, Boris insults Patrick yet again. The end. The second insult is not recorded in the story, but the third one is, because it is in a new scene. This version is edited by Zhutian Yang, on 6 August 2019 An older version of How to speak Genesese is authored by Patrick H. Winston, on June 8, 2018","title":"Writing Stories"},{"location":"stories/#how-to-write-stories","text":"Each story to be processed by Genesis is written in one or more text files.","title":"How to write stories"},{"location":"stories/#basic-idioms","text":"Here is a simple story in corpora/samples/genesese.txt : Start experiment. Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macbeth murders duncan. The end. The result appears in the elaboration graph shown in figure below: The line Start experiment. is an idiom that tells Genesis to clear text boxes and memories from previous experiment out of story processors in preparation for reading a new story. The line Start story titled \"Tragedy of Macbeth\". is an idiom that tells Genesis that a story is about to be told and the name of the story. The line The end. is an idiom that tells Genesis that the story is concluded. To read such a file, you click on the Read button on the Genesis interface and navigate to your file, as shown in figure below:","title":"Basic idioms"},{"location":"stories/#file-reader-idiom","text":"Naturally, you will want to assemble experiments using multiple files, perhaps one for common sense rules, another for concept patterns, yet another for the story. This is easy to arrange using the file reader idiom, as in the following examples. Note that.txtis assumed by the idiom processor: // Find and read file named \"General commonsense knowledge.txt\" Insert file General commonsense knowledge. // Find and read file named \"General commonsense knowledge.txt\" Insert file General reflective knowledge. But where are those files? Genesis does you a favor and looks around locally in your file structure to find them. If there are multiple files with the same name, you need to be careful, of course. Genesis will warn you that there are such name conflicts on the console, and pick one file from the alternatives, but you won\u2019t know if you ignore the console.","title":"File reader idiom"},{"location":"stories/#switch-idioms","text":"Genesis has lots of switches, many of which can be set by idiom. At this writing, all the switches in the Subsystems panel, the Story summarizing panel, the Story persuasion panel, the Why questions panel, and the Presentation panel can be set by idiom, as suggested by the following examples. Set Show markup switch to true. Set Summarizer switch to false. See Switches for a list of existing switches.","title":"Switch idioms"},{"location":"stories/#text-entry-box-idioms","text":"Another general purpose idiom primes the text entry box. For example, the following primes the text entry box with Make Macbeth be nice : Insert into text box: Make Macbeth be nice. You can put this anywhere in a file.","title":"Text entry box idioms"},{"location":"stories/#perspective-idioms","text":"Genesis has two primary story processors, and various idioms tell Genesis where to direct the text and what to show on the user interface. Both perspectives. // Direct text to both story processors. First perspective. // Direct text to left-side story processor only. Second perspective. // Direct text to right-side story processor only. Show both perspectives. // Show both perspectives. Show first perspective. // Show left-side elaboration graph only. Show second perspective. // Show right-side elaboration graph only. See Demo for how different culture perspectives can be used in interpreting Macbeth.","title":"Perspective idioms"},{"location":"stories/#user-interface-idioms","text":"The genesis user interface has three panes. The panel to display can be indicated under idiom control. For example: Set left panel to controls. Set right panel to mental models. Set bottom panel to elaboration graph. All the possibilities are exposed when you click on the three vertical bars on the top left of each pane. See Panes for a list of existing panes.","title":"User interface idioms."},{"location":"stories/#deprecated-idioms","text":"You may see in files various idioms that were once useful, but now are ignored or replaced. For example: Insert file Start experiment The story processors used to be initialized by reading idioms from a file. Now, this idiom merely does the same thing as Start experiment which involves no file reading. Start commonsense knowledge. This idiom used to tell the user interface that the next lines of text were part of the common sense collection. This is now automatic and the idiom is ignored. Start reflective knowledge. This idiom used to tell the user interface that the next lines of text were part of the concept pattern collection. This is now automatic and the idiom is ignored.","title":"Deprecated idioms"},{"location":"stories/#comments","text":"Naturally, you will want to comment your work, just as you would for your code. You use the Java conventions, with a double slash, //, introducing a single line comment, and matched / and / pairs bracketing multiline comments: // The idiom for resetting story processor memory: Start experiment. /* A sample story, starting with an instance of the \"Start story titled...\" idiom and ending with an instance of the \"The end.\" idiom. */ Start story titled \"Tragedy of Macbeth\". Macbeth, Macduff, and Duncan are persons. Macduff murders Duncan. The end. At the moment, you cannot nest / and / pairs.","title":"Comments"},{"location":"stories/#scenes","text":"Ordinarily, if you write Boris insults Patrick in a story twice, it only shows up once because it is assumed to be the same insult. You can have it appear twice, however, by starting a sentence with \u201cThen, ...\u201d, which puts in a scene marker and allows the same innerese expression to appear more than once, as in this story, with the result shown in figure below. Start story titled \"Duplicates\". Boris insults Patrick. Boris insults Patrick again. Then, Boris insults Patrick yet again. The end. The second insult is not recorded in the story, but the third one is, because it is in a new scene. This version is edited by Zhutian Yang, on 6 August 2019 An older version of How to speak Genesese is authored by Patrick H. Winston, on June 8, 2018","title":"Scenes"},{"location":"story-aligner/","text":"Imagination through Story Alignment The ideas and demos come from Matthew Paul Fay's 2012 MEng thesis Enabling Imagination through Story Alignment . Story comparison People intuitively use story comparison to draw on old experiences to construct and understand new ideas. Matthew's algorithms are capable of providing a polynomial time solution to an otherwise exponential time problem. A story is a sequence of time ordered story elements. The inputs to the algorithm are two sequences, A and B, and a similarity matrix, S, comparing all element types that exist in the domain. The goal is to find an alignment between sequences with a maximal alignment score where the score is calculated by summing over the similarity of each pair of elements in the alignment. Gaps are allowed anywhere in the alignment and are given a constant gap penalty d. Sequence alignment by NW algorithm Steps to determine the matching sequences using the Needleman Wunsch algorithm: Calculate the scoring table Trace the maximum matching threads Write down the matching sequences Step 1: Calculate the scoring table For example, here are the rules for scoring: If match, score + 1 If mismatch, score - 1 If Small insertions and deletions (INDELs), score - 1 Eg. sequences: ATCGGAG ATGGCAA Scoring matrix: F (i,j) = max{ F(i-1, j-1) + S(i,j) ==> F(\u2196) + S(mtach/mismatch) F(i-1, j) + S(indel) ==> F(\u2191) + S(indel) F(i, j-1) + S(indel) ==> F(\u2190) + S(indel) } The resulting scoring matrix: A T C G G A G 0 -1 -2 -3 -4 -5 -6 -7 A -1 1 0 -1 -2 -3 -4 -5 T -2 0 2 1 0 -1 -2 -3 G -3 -1 1 1 2 1 0 -1 G -4 -2 0 0 2 3 2 1 C -5 -3 -1 1 1 2 2 1 A -6 -4 -2 0 0 1 3 2 A -7 -5 -3 -1 -1 0 2 2 Step 2: Trace the maximum matching threads A T C G G A G 0 A 1 T 2 1 G 1 2 G 3 C 2 A 3 A 2 Step 3: Write down the matching sequences If the line goes horizontally at row N, add a dash after N; if the line goes vertical at column M, add a dash after M. There are two matching threads. If we choose the 1 on the right of 2 (TT): ATCGG-AG AT-GGCAA If we choose the 1 on the left of 2 (GG): ATCGG-AG ATG-GCAA Among these two, the best match is: ATCGG-AG AT-GGCAA Word Alignment by WordNet Using WordNet thread, similarity between two entities is calculated by counting the number of matched elements in the entities\u2019 primed threads and dividing the result by the maximum length of the entities\u2019 threads. Example similarity scores: Demo: Predict Future of Conflicts One useful application for story alignment in this domain is to align partial stories of conflicts to see what future events can be predicted from historical occurrences. One way is to match story elements: Another way is to match concepts: A relation represents any sort of interaction between the things. An elaboration graph is a visual representation of how all the events in the story are connected to each other and the inferred events from common sense knowledge.","title":"Story Aligner"},{"location":"story-aligner/#imagination-through-story-alignment","text":"The ideas and demos come from Matthew Paul Fay's 2012 MEng thesis Enabling Imagination through Story Alignment .","title":"Imagination through Story Alignment"},{"location":"story-aligner/#story-comparison","text":"People intuitively use story comparison to draw on old experiences to construct and understand new ideas. Matthew's algorithms are capable of providing a polynomial time solution to an otherwise exponential time problem. A story is a sequence of time ordered story elements. The inputs to the algorithm are two sequences, A and B, and a similarity matrix, S, comparing all element types that exist in the domain. The goal is to find an alignment between sequences with a maximal alignment score where the score is calculated by summing over the similarity of each pair of elements in the alignment. Gaps are allowed anywhere in the alignment and are given a constant gap penalty d.","title":"Story comparison"},{"location":"story-aligner/#sequence-alignment-by-nw-algorithm","text":"Steps to determine the matching sequences using the Needleman Wunsch algorithm: Calculate the scoring table Trace the maximum matching threads Write down the matching sequences","title":"Sequence alignment by NW algorithm"},{"location":"story-aligner/#step-1-calculate-the-scoring-table","text":"For example, here are the rules for scoring: If match, score + 1 If mismatch, score - 1 If Small insertions and deletions (INDELs), score - 1 Eg. sequences: ATCGGAG ATGGCAA Scoring matrix: F (i,j) = max{ F(i-1, j-1) + S(i,j) ==> F(\u2196) + S(mtach/mismatch) F(i-1, j) + S(indel) ==> F(\u2191) + S(indel) F(i, j-1) + S(indel) ==> F(\u2190) + S(indel) } The resulting scoring matrix: A T C G G A G 0 -1 -2 -3 -4 -5 -6 -7 A -1 1 0 -1 -2 -3 -4 -5 T -2 0 2 1 0 -1 -2 -3 G -3 -1 1 1 2 1 0 -1 G -4 -2 0 0 2 3 2 1 C -5 -3 -1 1 1 2 2 1 A -6 -4 -2 0 0 1 3 2 A -7 -5 -3 -1 -1 0 2 2","title":"Step 1: Calculate the scoring table"},{"location":"story-aligner/#step-2-trace-the-maximum-matching-threads","text":"A T C G G A G 0 A 1 T 2 1 G 1 2 G 3 C 2 A 3 A 2","title":"Step 2: Trace the maximum matching threads"},{"location":"story-aligner/#step-3-write-down-the-matching-sequences","text":"If the line goes horizontally at row N, add a dash after N; if the line goes vertical at column M, add a dash after M. There are two matching threads. If we choose the 1 on the right of 2 (TT): ATCGG-AG AT-GGCAA If we choose the 1 on the left of 2 (GG): ATCGG-AG ATG-GCAA Among these two, the best match is: ATCGG-AG AT-GGCAA","title":"Step 3: Write down the matching sequences"},{"location":"story-aligner/#word-alignment-by-wordnet","text":"Using WordNet thread, similarity between two entities is calculated by counting the number of matched elements in the entities\u2019 primed threads and dividing the result by the maximum length of the entities\u2019 threads. Example similarity scores:","title":"Word Alignment by WordNet"},{"location":"story-aligner/#demo-predict-future-of-conflicts","text":"One useful application for story alignment in this domain is to align partial stories of conflicts to see what future events can be predicted from historical occurrences. One way is to match story elements: Another way is to match concepts: A relation represents any sort of interaction between the things. An elaboration graph is a visual representation of how all the events in the story are connected to each other and the inferred events from common sense knowledge.","title":"Demo: Predict Future of Conflicts"},{"location":"story-reteller/","text":"Story Reteller Here we will see the ideas and demonstrations from Sayan's MEng Thesis: Audience Aware Computational Discourse Generation for Instruction and Persuasion , 2014 and my thought. Intro: Audience Aware Storytelling Sayan sees storytelling as a goal directed social activity. The main problem is to automatically generate discourse to serve instructive and persuasion goals. The next step is to change from teacher to student relationship to character 1 to character 2 relationship, both of which have incomplete knowledge and mental model of each other Human storytelling competence and possible computational applications: Build Mental Models of Others . Given information about the audience (e.g., demographic, favorite books), the system models the knowledge and beliefs they might hold . Update Mental Models of Others . Given feedback about how the mental models are incomplete or incorrect, the system update the models. Achieve Narrative Goals . Specify the goals as certain reactions the storyteller wants to elicit from the audience . Mental Simulation of Social Interactions . Simulate telling a story to its perceived audience and thus predict the audience's reactions. 1 & 2. Maintain mental models of audience Modeling the audience in terms of its knowledge and beliefs about the world personal stimulus-action emotional state bank of previous stories and personal memories The audience has concept patterns , including: personality traits such as \u201cnice\u201d, \u201cgenerous\u201d, and \u201cselfish\u201d situational attributes such as \u201cin a dilemma\u201d, \u201cunlucky\u201d, and \u201cin survival mode\u201d social roles with value attached to it such as \u201cbad parent\u201d and \u201cgood husband\u201d Other patterns: Novelty and interestingness checks carried out by comparing the newly generated story to the bank of previous stories ways to verify if an actor or an event is of certain attributes: * compare with other stories: novel or banal: interesting or boring; surprising or normal * thinking pattern detection: funny, * behavior pattern detection: brave, 3 & 4. Elicit reactions Example of Stimulus-Action Matrix Portion: Stimulus: Bully encounters a usual victim of his abuse. Possible next actions: [Apply physical force (0), Engage in verbal abuse (0), Do nothing (0.7), Apologize (0.2), Act friendly(0.1)] I don't think humans make decisions based on probability. There is always context and we try to make the most optimal decision. Thus it is unlikely that a matrix can account for all the possibilities and probabilities. The storyteller's tools to craft narrative discourse : Priming the audience using paratext Using motifs and repetition for emphasis Invoking the \"post hoc ergo propter hoc\" fallacy, or deliberately avoiding it Evoke empathy within the reader, or knowingly avoiding it Fine tuning the coherence of the discourse for desired effect on persuasiveness Making references to the audience's base of prior stories, and to familiar masterplots Using analogies and metaphors Using humor to soften the audience's cognitive resistance to opinion changes Narrative tools for persuasive discourse generation Selection narration: Select the information that serve the persuasive goal we set out to achieve Variable focalization: Skew the opinions of the reader to a conclusion favored by the narrator. Achieve this by representing the same events from the different perspectives. Suri's work on detecting the goals of the storyteller Variable speed: Narrating an event with more details makes the reader perceive it as more important. Achieve this by representing events as consists of sub-events so that a given event can be expanded or collapsed. Use \"concept pattern\" as a way to do abstraction References to the reader's prior story base and use of master plot: People are quicker to be persuaded by stories which bear resemblance to the other stories they already know. If we use the example of something the person just understood, learned, or saw, he may find it easier to accept it. Evoke sympathy/empathy from the reader: Eliciting an emotional response from the reader can be a powerful path to persuasion. Model the personality traits of the readers. Manipulate \"Post hoc ergo propter hoc\" fallacy: The reader's notions of causality in the story can be manipulated by appealing to this fallacy. Continuity/Coherence for persuasion: Stories that appear to be continuous and coherent are more persuasive. Improve the continuity and coherence of the story by first defining good metrics. Repetition n. Leaning and more The storyteller learn from feedback : how her model of the audience was incomplete or incorrect. heuristics for what tools to use to achieve which goals, techniques that are best used together. Instructive Narrative Generation The two Genesis perspectives describe the understanding of the teacher and the understanding of the student. There as four teaching modes depending on the granularity of instruction, specified as four options in GUI > Subsystems > Story Teller: Tell - Show the elaboration graph of the student with its own mental model Spoon feed - The teacher relays the missing element to the student via the student\u2019s Story Element Input Port . Explain - The teacher relays the missing element, as well as the story element which is a cause of the missing story element as seen on the teacher's elaboration graph to the student via the student\u2019s Story Element Input Port . Teach (principles) - The teacher relays the missing story element on the student\u2019s Story Element Input Port , and relays the general rule that will enable the missing story element to be included in the student's elaboration graph on the student\u2019s Rule Input Port . Color codes: Colored red : statements in the discourse provided in addition to the explicit text of the story Colored blue : principles provided by the teacher to the student in the discourse, which are immediately incorporated into the student\u2019s knowledge base and can be used in making inferences for the rest of the narration period An elaboration graph is produced that demonstrates the teacher\u2019s understanding of the story. Persuasive Narrative Generation The two Genesis perspectives describe the same audience\u2019s reaction to being told the same story in two different ways. The end user may instruct the storyteller to generate different narrative discourses around Hansel and Gretel such that The Witch appears to be a likable character, or that The Woodcutter is not forgiven for his parenting crimes and appears to be an unlikable character. The end user may specify: the story: to process for persuasive retelling the commonsense: mental model of the audience, including the rules, concepts, and super concepts one end user may choose to define \u201cLikable\u201d as a super concept consisting of \u201chonest\u201d, \u201chardworking\u201d and \u201cgenerous\u201d, while another end user may choose to define \u201cLikable\u201d as consisting of \u201chumorous\u201d, \u201cmisunderstood\u201d and \u201cfriendly\u201d the goal (from Text Entry Box): the statement to persuade the audience by the end of the narrative the retelling options: whether to use subtractive methods and additive methods in the generation Whether to take a single-character or relativistic approach to the discourse generation Algorithm 1. Find Problems - The story is processed by the audience's mental model and the concept patterns are identified. Then the concept patterns identified are checked against the requirements of the persuasion goal, specified in format, Make CHARACTER-X be CONCEPT . 2A. Remove Elements - Any concept patterns identified that would hinder the achievement of the given persuasion goal are considered \u201cundesirable\u201d and are marked to be removed. How a concept pattern comes to be considered \u201cundesirable\u201d depends on the whether the program is operating in \u201csingle-character\u201d or \u201crelativistic\u201d mode. Take the example where the persuasion goal is described as \u201cMake The Witch be likable.\u201d: If single-character mode: Among the concepts involving The Witch that emerge from the analysis of the raw story, any concept that would negate the perception that The Witch is likable would be marked as undesirable. For example, a \u201ccruel\u201d concept triggered by The Witch trying to cook Hansel and Gretel in the oven might be marked for elimination. If relativistic mode: In addition to the concepts identified as undesirable by the standards of the single-character mode, in the relativistic mode, any concepts that make other characters appear likable might also be marked for elimination. This is because when The Witch is surrounded by unlikable characters in the narrative, for example, it would become easier to persuade the audience that The Witch herself is likable. 2B. Add Elements - Any concept patterns identified that would support the achievement of the given persuasion goal are explicitly considered \u201cdesirable\u201d and are marked to be retained. Again, how a concept pattern comes to be considered \u201cdesirable\u201d depends on the whether the program is operating in \u201csingle-character\u201d or \u201crelativistic\u201d mode. 3. Check Success - The persuasive discourse generated is considered successful if the audience, upon analyzing the discourse identifies only those concept patterns that agree with or don\u2019t affect the persuasion goal, and identifies none of those concept patterns which would disagree with, or work to negate the perception of the character aimed for in the persuasion goal. Demo: Likable or Unlikable The text of the generated discourse shows the differences between the raw form of the story and the generated discourse: Colored red and struck-through : Statements in the discourse that are purposefully taken out are the story Colored green : Statements in the discourse that are purposefully retained Colored blue : Statements that are added like a preamble Demo: Russian or Estonia Discourse shaped to make Russia or Estonia appear as the aggressor in the conflict. Problems with Concept Patterns The concept patterns used in the story teller to detect concepts are too laborious to craft. There must be simpler ways. Here are example concept definitions of Bad parent: Start description of \"Bad parent\". XX is a person. YY is a person. XX is YY\u2019s parent. XX abandons YY. Evidently, XX triggers \"bad parent\". The end. Start description of \"Bad parent 2\". XX is a person. YY is a person. XX is YY\u2019s parent. AA is an action. XX\u2019s performing AA leads to YY\u2019s becoming afraid. Evidently, XX triggers \"badparent 2\". The end. Start description of \"Bad parent 3\". XX is a person. YY is a person. XX is YY\u2019s parent. YY becomes angry with XX. Evidently, XX triggers \"badparent 3\". The end. So abandon, frighten, and anger are all behaviors of a bad parent. Can these concept pattern rules be used to form the personality profile of a bad parent? Can these rules be used to solve problems such as \"keep the kids of neighbors away from my yard\"? What if XX died and left his kids afraid, is XX is bad parent? What if XX is busy and never attend to his kids, is XX is bad parent? Can we answer all these questions by reasoning as opposed to retrieving? Maybe fundamental moral knowledge needs to be encoded about what is good and bad, what is right and wrong, then all the other reasonings are based on those values. Maybe those connections are all associations. So \"XX makes YY afraid\" and \"XX abandons YY\" both lead to \"XX is seen as bad parent to YY.\"","title":"Story Reteller"},{"location":"story-reteller/#story-reteller","text":"Here we will see the ideas and demonstrations from Sayan's MEng Thesis: Audience Aware Computational Discourse Generation for Instruction and Persuasion , 2014 and my thought.","title":"Story Reteller"},{"location":"story-reteller/#intro-audience-aware-storytelling","text":"Sayan sees storytelling as a goal directed social activity. The main problem is to automatically generate discourse to serve instructive and persuasion goals. The next step is to change from teacher to student relationship to character 1 to character 2 relationship, both of which have incomplete knowledge and mental model of each other Human storytelling competence and possible computational applications: Build Mental Models of Others . Given information about the audience (e.g., demographic, favorite books), the system models the knowledge and beliefs they might hold . Update Mental Models of Others . Given feedback about how the mental models are incomplete or incorrect, the system update the models. Achieve Narrative Goals . Specify the goals as certain reactions the storyteller wants to elicit from the audience . Mental Simulation of Social Interactions . Simulate telling a story to its perceived audience and thus predict the audience's reactions.","title":"Intro: Audience Aware Storytelling"},{"location":"story-reteller/#1-2-maintain-mental-models-of-audience","text":"Modeling the audience in terms of its knowledge and beliefs about the world personal stimulus-action emotional state bank of previous stories and personal memories The audience has concept patterns , including: personality traits such as \u201cnice\u201d, \u201cgenerous\u201d, and \u201cselfish\u201d situational attributes such as \u201cin a dilemma\u201d, \u201cunlucky\u201d, and \u201cin survival mode\u201d social roles with value attached to it such as \u201cbad parent\u201d and \u201cgood husband\u201d Other patterns: Novelty and interestingness checks carried out by comparing the newly generated story to the bank of previous stories ways to verify if an actor or an event is of certain attributes: * compare with other stories: novel or banal: interesting or boring; surprising or normal * thinking pattern detection: funny, * behavior pattern detection: brave,","title":"1 &amp; 2. Maintain mental models of audience"},{"location":"story-reteller/#3-4-elicit-reactions","text":"Example of Stimulus-Action Matrix Portion: Stimulus: Bully encounters a usual victim of his abuse. Possible next actions: [Apply physical force (0), Engage in verbal abuse (0), Do nothing (0.7), Apologize (0.2), Act friendly(0.1)] I don't think humans make decisions based on probability. There is always context and we try to make the most optimal decision. Thus it is unlikely that a matrix can account for all the possibilities and probabilities. The storyteller's tools to craft narrative discourse : Priming the audience using paratext Using motifs and repetition for emphasis Invoking the \"post hoc ergo propter hoc\" fallacy, or deliberately avoiding it Evoke empathy within the reader, or knowingly avoiding it Fine tuning the coherence of the discourse for desired effect on persuasiveness Making references to the audience's base of prior stories, and to familiar masterplots Using analogies and metaphors Using humor to soften the audience's cognitive resistance to opinion changes Narrative tools for persuasive discourse generation Selection narration: Select the information that serve the persuasive goal we set out to achieve Variable focalization: Skew the opinions of the reader to a conclusion favored by the narrator. Achieve this by representing the same events from the different perspectives. Suri's work on detecting the goals of the storyteller Variable speed: Narrating an event with more details makes the reader perceive it as more important. Achieve this by representing events as consists of sub-events so that a given event can be expanded or collapsed. Use \"concept pattern\" as a way to do abstraction References to the reader's prior story base and use of master plot: People are quicker to be persuaded by stories which bear resemblance to the other stories they already know. If we use the example of something the person just understood, learned, or saw, he may find it easier to accept it. Evoke sympathy/empathy from the reader: Eliciting an emotional response from the reader can be a powerful path to persuasion. Model the personality traits of the readers. Manipulate \"Post hoc ergo propter hoc\" fallacy: The reader's notions of causality in the story can be manipulated by appealing to this fallacy. Continuity/Coherence for persuasion: Stories that appear to be continuous and coherent are more persuasive. Improve the continuity and coherence of the story by first defining good metrics. Repetition","title":"3 &amp; 4. Elicit reactions"},{"location":"story-reteller/#n-leaning-and-more","text":"The storyteller learn from feedback : how her model of the audience was incomplete or incorrect. heuristics for what tools to use to achieve which goals, techniques that are best used together.","title":"n. Leaning and more"},{"location":"story-reteller/#instructive-narrative-generation","text":"The two Genesis perspectives describe the understanding of the teacher and the understanding of the student. There as four teaching modes depending on the granularity of instruction, specified as four options in GUI > Subsystems > Story Teller: Tell - Show the elaboration graph of the student with its own mental model Spoon feed - The teacher relays the missing element to the student via the student\u2019s Story Element Input Port . Explain - The teacher relays the missing element, as well as the story element which is a cause of the missing story element as seen on the teacher's elaboration graph to the student via the student\u2019s Story Element Input Port . Teach (principles) - The teacher relays the missing story element on the student\u2019s Story Element Input Port , and relays the general rule that will enable the missing story element to be included in the student's elaboration graph on the student\u2019s Rule Input Port . Color codes: Colored red : statements in the discourse provided in addition to the explicit text of the story Colored blue : principles provided by the teacher to the student in the discourse, which are immediately incorporated into the student\u2019s knowledge base and can be used in making inferences for the rest of the narration period An elaboration graph is produced that demonstrates the teacher\u2019s understanding of the story.","title":"Instructive Narrative Generation"},{"location":"story-reteller/#persuasive-narrative-generation","text":"The two Genesis perspectives describe the same audience\u2019s reaction to being told the same story in two different ways. The end user may instruct the storyteller to generate different narrative discourses around Hansel and Gretel such that The Witch appears to be a likable character, or that The Woodcutter is not forgiven for his parenting crimes and appears to be an unlikable character. The end user may specify: the story: to process for persuasive retelling the commonsense: mental model of the audience, including the rules, concepts, and super concepts one end user may choose to define \u201cLikable\u201d as a super concept consisting of \u201chonest\u201d, \u201chardworking\u201d and \u201cgenerous\u201d, while another end user may choose to define \u201cLikable\u201d as consisting of \u201chumorous\u201d, \u201cmisunderstood\u201d and \u201cfriendly\u201d the goal (from Text Entry Box): the statement to persuade the audience by the end of the narrative the retelling options: whether to use subtractive methods and additive methods in the generation Whether to take a single-character or relativistic approach to the discourse generation","title":"Persuasive Narrative Generation"},{"location":"story-reteller/#algorithm","text":"1. Find Problems - The story is processed by the audience's mental model and the concept patterns are identified. Then the concept patterns identified are checked against the requirements of the persuasion goal, specified in format, Make CHARACTER-X be CONCEPT . 2A. Remove Elements - Any concept patterns identified that would hinder the achievement of the given persuasion goal are considered \u201cundesirable\u201d and are marked to be removed. How a concept pattern comes to be considered \u201cundesirable\u201d depends on the whether the program is operating in \u201csingle-character\u201d or \u201crelativistic\u201d mode. Take the example where the persuasion goal is described as \u201cMake The Witch be likable.\u201d: If single-character mode: Among the concepts involving The Witch that emerge from the analysis of the raw story, any concept that would negate the perception that The Witch is likable would be marked as undesirable. For example, a \u201ccruel\u201d concept triggered by The Witch trying to cook Hansel and Gretel in the oven might be marked for elimination. If relativistic mode: In addition to the concepts identified as undesirable by the standards of the single-character mode, in the relativistic mode, any concepts that make other characters appear likable might also be marked for elimination. This is because when The Witch is surrounded by unlikable characters in the narrative, for example, it would become easier to persuade the audience that The Witch herself is likable. 2B. Add Elements - Any concept patterns identified that would support the achievement of the given persuasion goal are explicitly considered \u201cdesirable\u201d and are marked to be retained. Again, how a concept pattern comes to be considered \u201cdesirable\u201d depends on the whether the program is operating in \u201csingle-character\u201d or \u201crelativistic\u201d mode. 3. Check Success - The persuasive discourse generated is considered successful if the audience, upon analyzing the discourse identifies only those concept patterns that agree with or don\u2019t affect the persuasion goal, and identifies none of those concept patterns which would disagree with, or work to negate the perception of the character aimed for in the persuasion goal.","title":"Algorithm"},{"location":"story-reteller/#demo-likable-or-unlikable","text":"The text of the generated discourse shows the differences between the raw form of the story and the generated discourse: Colored red and struck-through : Statements in the discourse that are purposefully taken out are the story Colored green : Statements in the discourse that are purposefully retained Colored blue : Statements that are added like a preamble","title":"Demo: Likable or Unlikable"},{"location":"story-reteller/#demo-russian-or-estonia","text":"Discourse shaped to make Russia or Estonia appear as the aggressor in the conflict.","title":"Demo: Russian or Estonia"},{"location":"story-reteller/#problems-with-concept-patterns","text":"The concept patterns used in the story teller to detect concepts are too laborious to craft. There must be simpler ways. Here are example concept definitions of Bad parent: Start description of \"Bad parent\". XX is a person. YY is a person. XX is YY\u2019s parent. XX abandons YY. Evidently, XX triggers \"bad parent\". The end. Start description of \"Bad parent 2\". XX is a person. YY is a person. XX is YY\u2019s parent. AA is an action. XX\u2019s performing AA leads to YY\u2019s becoming afraid. Evidently, XX triggers \"badparent 2\". The end. Start description of \"Bad parent 3\". XX is a person. YY is a person. XX is YY\u2019s parent. YY becomes angry with XX. Evidently, XX triggers \"badparent 3\". The end. So abandon, frighten, and anger are all behaviors of a bad parent. Can these concept pattern rules be used to form the personality profile of a bad parent? Can these rules be used to solve problems such as \"keep the kids of neighbors away from my yard\"? What if XX died and left his kids afraid, is XX is bad parent? What if XX is busy and never attend to his kids, is XX is bad parent? Can we answer all these questions by reasoning as opposed to retrieving? Maybe fundamental moral knowledge needs to be encoded about what is good and bad, what is right and wrong, then all the other reasonings are based on those values. Maybe those connections are all associations. So \"XX makes YY afraid\" and \"XX abandons YY\" both lead to \"XX is seen as bad parent to YY.\"","title":"Problems with Concept Patterns"},{"location":"story-summarizer/","text":"Story Summarizer Here summarizes the ideas and demos in Winston's Model-based Story Summary in 6th International Workshop on Computational Models of Narrative (May 2015). To build a story summarizer, Winston thinks it useful to retell only the sentences that are involved in concepts of interests, while eliminating disconnected story elements and obvious inferences. Demo: Macbeth Plot Principles of Connectivity Keep only those explicit elements that are causal connections and explicit elements that are embedded in Genesis\u2019s inferred causal connections. Principles of Concept Focus Include only explicit elements that lead eventually\u2014via a chain of inferred connections\u2014to an element lying in an instantiated concept pattern. Principle of Dominant Concept Focus Pyrrhic victory dominates all other concepts in the sense that it incorporates the most story elements. Compression by eliminating details of how actions are performed Suppresses details about the guards, the bedroom, and stabbing. Compression using the post hoc ergo propter hoc assumption After this does not mean because of this in logic, but we use it nevertheless in telling stories smoothly, dropping explicit cause when proximity makes the cause apparent: Implementation Popup Macbeth summary popup. Set all switches to defaults. Set Include unabridged version switch to true. Set Include agent roles switch to false. Set Always include surprises switch to false. Set Include explanations switch to true. Set Filter out means switch to true. Set Filter out if follows from switch to true. Set Show markup switch to true. Insert file Macbeth1 summary.","title":"Story Summarizer"},{"location":"story-summarizer/#story-summarizer","text":"Here summarizes the ideas and demos in Winston's Model-based Story Summary in 6th International Workshop on Computational Models of Narrative (May 2015). To build a story summarizer, Winston thinks it useful to retell only the sentences that are involved in concepts of interests, while eliminating disconnected story elements and obvious inferences.","title":"Story Summarizer"},{"location":"story-summarizer/#demo-macbeth-plot","text":"","title":"Demo: Macbeth Plot"},{"location":"story-summarizer/#principles-of-connectivity","text":"Keep only those explicit elements that are causal connections and explicit elements that are embedded in Genesis\u2019s inferred causal connections.","title":"Principles of Connectivity"},{"location":"story-summarizer/#principles-of-concept-focus","text":"Include only explicit elements that lead eventually\u2014via a chain of inferred connections\u2014to an element lying in an instantiated concept pattern.","title":"Principles of Concept Focus"},{"location":"story-summarizer/#principle-of-dominant-concept-focus","text":"Pyrrhic victory dominates all other concepts in the sense that it incorporates the most story elements.","title":"Principle of Dominant Concept Focus"},{"location":"story-summarizer/#compression-by-eliminating-details-of-how-actions-are-performed","text":"Suppresses details about the guards, the bedroom, and stabbing.","title":"Compression by eliminating details of how actions are performed"},{"location":"story-summarizer/#compression-using-the-post-hoc-ergo-propter-hoc-assumption","text":"After this does not mean because of this in logic, but we use it nevertheless in telling stories smoothly, dropping explicit cause when proximity makes the cause apparent:","title":"Compression using the post hoc ergo propter hoc assumption"},{"location":"story-summarizer/#implementation","text":"Popup Macbeth summary popup. Set all switches to defaults. Set Include unabridged version switch to true. Set Include agent roles switch to false. Set Always include surprises switch to false. Set Include explanations switch to true. Set Filter out means switch to true. Set Filter out if follows from switch to true. Set Show markup switch to true. Insert file Macbeth1 summary.","title":"Implementation"},{"location":"tips-eclipse/","text":"Tips on Debugging in Eclipse Mark.say() For easier debugging, we do not use ordinary print statements in genesis. Mark.say() , our fancy print statements print on the Eclipse console with a clicable pointer to the place in the code wher the fancy print statement lies. Hence: // No good, cannot easily find the location of the printing statement. System.out.println(\"Hello\" + \" \" + \"world\"); // Great, one click takes you to the location of the printing statement. Mark.say(\"Hello\", \"world\");","title":"Debugging in Eclipse"},{"location":"tips-eclipse/#tips-on-debugging-in-eclipse","text":"","title":"Tips on Debugging in Eclipse"},{"location":"tips-eclipse/#marksay","text":"For easier debugging, we do not use ordinary print statements in genesis. Mark.say() , our fancy print statements print on the Eclipse console with a clicable pointer to the place in the code wher the fancy print statement lies. Hence: // No good, cannot easily find the location of the printing statement. System.out.println(\"Hello\" + \" \" + \"world\"); // Great, one click takes you to the location of the printing statement. Mark.say(\"Hello\", \"world\");","title":"Mark.say()"},{"location":"tips-genesese/","text":"How to speak Genesese Genesese is the subset of English understood by Genesis. Understood means that the English is parsable by Boris Katz\u2019s START parser to produce a set of linguistic triples, which Genesis Translator uses to form into Genesis\u2019s inner language, Innerese . All story element and knowledge in Genesis is produced via Genesese-to-Innerese parsing and translation. Genesese is also the subset of English generated by Genesis. Generate dmeans that the Innerese is translated into the linguistic triples needed by START\u2019s generator to produces English sentences. START triples The linguistic triples produced by START parser form a semantic net. \"Become\" Early in the development of Genesis, a conundrum appeared. If you say Macbeth is happy , does that mean Macbeth has been happy since the beginning of time or that he has just become happy? We humans sort it out with a level of common sense not yet in Genesis. The solution is to say become explicitly when a property just appears. Quotation Sometimes START needs a little help when sentences get deeply nested. You can do this using nested \"\" and <> pairs as in the following example: John believes \"Mary thinks<Sally knows \"Susan loves Paul\">\". We use the brackets instead of matched single quotes because the use of single quotes for possession would confuse Genesis terribly. The result of the demonstration sentences is as in figure below. Geneses also provides a bit of syntactic sugar. John: Mary is crazy. is equivalent to John says \"Mary is crazy\". This version is edited by Zhutian Yang, on 6 August 2019 An older version of How to speak Genesese is authored by Patrick H. Winston, on June 8, 2018","title":"Writing Parsable English"},{"location":"tips-genesese/#how-to-speak-genesese","text":"Genesese is the subset of English understood by Genesis. Understood means that the English is parsable by Boris Katz\u2019s START parser to produce a set of linguistic triples, which Genesis Translator uses to form into Genesis\u2019s inner language, Innerese . All story element and knowledge in Genesis is produced via Genesese-to-Innerese parsing and translation. Genesese is also the subset of English generated by Genesis. Generate dmeans that the Innerese is translated into the linguistic triples needed by START\u2019s generator to produces English sentences.","title":"How to speak Genesese"},{"location":"tips-genesese/#start-triples","text":"The linguistic triples produced by START parser form a semantic net.","title":"START triples"},{"location":"tips-genesese/#become","text":"Early in the development of Genesis, a conundrum appeared. If you say Macbeth is happy , does that mean Macbeth has been happy since the beginning of time or that he has just become happy? We humans sort it out with a level of common sense not yet in Genesis. The solution is to say become explicitly when a property just appears.","title":"\"Become\""},{"location":"tips-genesese/#quotation","text":"Sometimes START needs a little help when sentences get deeply nested. You can do this using nested \"\" and <> pairs as in the following example: John believes \"Mary thinks<Sally knows \"Susan loves Paul\">\". We use the brackets instead of matched single quotes because the use of single quotes for possession would confuse Genesis terribly. The result of the demonstration sentences is as in figure below. Geneses also provides a bit of syntactic sugar. John: Mary is crazy. is equivalent to John says \"Mary is crazy\". This version is edited by Zhutian Yang, on 6 August 2019 An older version of How to speak Genesese is authored by Patrick H. Winston, on June 8, 2018","title":"Quotation"},{"location":"translator/","text":"","title":"Translator"},{"location":"tut-start/","text":"To log into the info lab machine ssh -X <your-username>@ashmore.csail.mit.edu To see processes on the machine nvidia-smi","title":"Tut start"},{"location":"wikihow/","text":"Get Commonsense Rules from WikiHow","title":"Procedural Knowledge - WikiHow"},{"location":"wikihow/#get-commonsense-rules-from-wikihow","text":"","title":"Get Commonsense Rules from WikiHow"},{"location":"wire/","text":"Box and Wire In Genesis, modules are connected by wires that carry signals. In this document, I explain a Java mechanism, achieved through the Connections class, that enables you to connect system modules to one another using a box-and-wire metaphor. Connect boxes through Connections Class Static methods in the Connections class perform these purposes: Connections.wire(source, destination) sets up connections between wired boxes. Connections.getPorts(this).transmit(signal) transmits a signal via an instance\u2019s output port. Connections.getPorts(this).addSignalProcessor(\"functionName\") specifies the function to process the signal once it is received via an instance\u2019s input port. Suppose you want to connect SourceClass and DestinationClass together. Your first step is to have both class extend the AbstractWiredBox class: public class SourceClass extends AbstractWiredBox { } public class DestinationClass extends AbstractWiredBox{ } Then, you add the function sayHello to transmit signal in SourceClass: public class SourceClass extends AbstractWiredBox { public void sayHello() { String signal = \"Hello world\"; Mark.say(\"Source transmits\", signal); Connections.getPorts(this).transmit(signal); } } Next, you add the mechanism to process received signal using function replyHello in DestinationClass: public class DestinationClass extends AbstractWiredBox { public DestinationClass() { Connections.getPorts(this).addSignalProcessor(\"replyHello\"); } public void replyHello(Object input) { Mark.say(\"Destination receives\", input); } } Note that the function for processing received signals in any destination class must be a void method with a single argument of the Object class To wire the two classes together and test the connection, let's create a test class named, unimaginatively, TestWire : public class TestWire { public static void main(String[] args) { SourceClass source = new SourceClass(); DestinationClass destination = new DestinationClass(); Connections.wire(source, destination); source.sayHello(); } } When you run the TestWire , the instance of SourceClass will send string \"Hello world\" to the instance of DestinationClass , where the string is processed by function replyHello() . So you will see the following results in console: >>> Source transmits Hello world >>> Destination receives Hello world You can transmit multiple objects by packing them Because of characteristics of Java\u2019s reflection mechanism, we required the signal processors to be void methods with single arguments. You can nevertheless send any number of objects at the same time by packaging them up in a Signal object, as in the following example. public class SourceClass extends AbstractWiredBox { public void sayHello() { String string = \"Hello world\"; int number = 11; Object signal = new Signal(string, number); Mark.say(\"Source transmits many things\", string, number); Mark.say(\"Source transmits\", signal); Connections.getPorts(this).transmit(signal); } } We can have two processing functions in DestinationClass to process the input signal, one of which knows how to unpack the signal back to the original objects: public class DestinationClass extends AbstractWiredBox { public DestinationClass() { Connections.getPorts(this).addSignalProcessor(\"replyHello\"); Connections.getPorts(this).addSignalProcessor(\"replyManyThings\"); } public void replyHello(Object input) { Mark.say(\"Destination receives\", input); } public void replyManyThings(Object input) { if (input instanceof Signal) { Signal signal = (Signal) input; String x = signal.get(0, String.class); int y = signal.get(1, Integer.class); Mark.say(\"Destination receives many things\", x, y); } } } Without modifying the test class, we get some result like: >>> Source transmits many things Hello world 11 >>> Source transmits Signals.Signal@30f39991 >>> Destination receives Signals.Signal@30f39991 >>> Destination receives many things Hello world 11 You can add interim class We can add one interim class to process the output signal: public class InterimClass extends AbstractWiredBox { public InterimClass() { Connections.getPorts(this).addSignalProcessor(\"process\"); } public void process(Object input) { input = (Object) ((String) input + \" (processed)\"); Connections.getPorts(this).transmit(input); } } We rewire the connection between SourceClass and DestinationClass so that signal is processed by InterimClass before reaching DestinationClass : public class TestWire { public static void main(String[] args) { SourceClass source = new SourceClass(); DestinationClass destination = new DestinationClass(); InterimClass interim = new InterimClass(); Connections.wire(source, interim); Connections.wire(interim, destination); source.sayHello(); } } The output will be: >>> Source transmits Hello world >>> Destination receives Hello world (processed) You can turn existing subclasses into boxes Suppose you have a class that already extends some other class. You won't be able to make it extend AbstractWiredBox class. So you can make it implement the Wiredbox interface instead. The only extra step is to implement a getName method: public class SourceClass implements WiredBox { @Override public String getName() { return null; } ... } You can use multiple input ports or multiple output ports Between two wired boxes, signals can be transmitted from and received by different ports. To refined three functions of the Connections class: Connections.wire( [sourcePortName,] source, [destinationPortName,] destination) sets up connections between wired boxes. Connections.getPorts(this).transmit( [sourcePortName,] signal) transmits a signal via an instance\u2019s output port, optionally named sourcePortName . Connections.getPorts(this).addSignalProcessor([destinationPortName,] \"functionName\") specifies the function to process the signal once it is received via an instance\u2019s input port, optionally named destinationPortName . For example, SourceClass may have two ways of sending signals: public class SourceClass extends AbstractWiredBox { public static final String OUTPUT_PORT_1 = \"port 1 output\"; public static final String OUTPUT_PORT_2 = \"port 2 output\"; public void sayHello() { String signal = \"Hello world\"; Mark.say(\"Source transmits\", signal); Connections.getPorts(this).transmit(OUTPUT_PORT_1, signal); } public void sayHelloAgain() { String signal = \"Hello world again\"; Mark.say(\"Source transmits again\", signal); Connections.getPorts(this).transmit(OUTPUT_PORT_2, signal); } } Accordingly, DestinationClass may have two ways of processing signals: public class DestinationClass extends AbstractWiredBox { public static final String INPUT_PORT_1 = \"port 1 input\"; public static final String INPUT_PORT_2 = \"port 2 input\"; public DestinationClass() { Connections.getPorts(this).addSignalProcessor(INPUT_PORT_1, \"replyHello\"); Connections.getPorts(this).addSignalProcessor(INPUT_PORT_2, \"replyHelloAgain\"); } public void replyHello(Object input) { Mark.say(\"Destination receives\", input); } public void replyHelloAgain(Object input) { Mark.say(\"Destination receives again\", input); } } In TestWire : public class TestWire { public static void main(String[] args) { SourceClass source = new SourceClass(); DestinationClass destination = new DestinationClass(); Connections.wire(SourceClass.OUTPUT_PORT_1, source, DestinationClass.INPUT_PORT_1, destination); Connections.wire(SourceClass.OUTPUT_PORT_2, source, DestinationClass.INPUT_PORT_2, destination); source.sayHello(); source.sayHelloAgain(); } } The output will be: >>> Source transmits Hello world >>> Destination receives Hello world >>> Source transmits again Hello world again >>> Destination receives again Hello world again This version is edited by Zhutian Yang, on 5 August 2019 An older version is authored by Patrick H. Winston, on 7 October 2014","title":"Box and Wire"},{"location":"wire/#box-and-wire","text":"In Genesis, modules are connected by wires that carry signals. In this document, I explain a Java mechanism, achieved through the Connections class, that enables you to connect system modules to one another using a box-and-wire metaphor.","title":"Box and Wire"},{"location":"wire/#connect-boxes-through-connections-class","text":"Static methods in the Connections class perform these purposes: Connections.wire(source, destination) sets up connections between wired boxes. Connections.getPorts(this).transmit(signal) transmits a signal via an instance\u2019s output port. Connections.getPorts(this).addSignalProcessor(\"functionName\") specifies the function to process the signal once it is received via an instance\u2019s input port. Suppose you want to connect SourceClass and DestinationClass together. Your first step is to have both class extend the AbstractWiredBox class: public class SourceClass extends AbstractWiredBox { } public class DestinationClass extends AbstractWiredBox{ } Then, you add the function sayHello to transmit signal in SourceClass: public class SourceClass extends AbstractWiredBox { public void sayHello() { String signal = \"Hello world\"; Mark.say(\"Source transmits\", signal); Connections.getPorts(this).transmit(signal); } } Next, you add the mechanism to process received signal using function replyHello in DestinationClass: public class DestinationClass extends AbstractWiredBox { public DestinationClass() { Connections.getPorts(this).addSignalProcessor(\"replyHello\"); } public void replyHello(Object input) { Mark.say(\"Destination receives\", input); } } Note that the function for processing received signals in any destination class must be a void method with a single argument of the Object class To wire the two classes together and test the connection, let's create a test class named, unimaginatively, TestWire : public class TestWire { public static void main(String[] args) { SourceClass source = new SourceClass(); DestinationClass destination = new DestinationClass(); Connections.wire(source, destination); source.sayHello(); } } When you run the TestWire , the instance of SourceClass will send string \"Hello world\" to the instance of DestinationClass , where the string is processed by function replyHello() . So you will see the following results in console: >>> Source transmits Hello world >>> Destination receives Hello world","title":"Connect boxes through Connections Class"},{"location":"wire/#you-can-transmit-multiple-objects-by-packing-them","text":"Because of characteristics of Java\u2019s reflection mechanism, we required the signal processors to be void methods with single arguments. You can nevertheless send any number of objects at the same time by packaging them up in a Signal object, as in the following example. public class SourceClass extends AbstractWiredBox { public void sayHello() { String string = \"Hello world\"; int number = 11; Object signal = new Signal(string, number); Mark.say(\"Source transmits many things\", string, number); Mark.say(\"Source transmits\", signal); Connections.getPorts(this).transmit(signal); } } We can have two processing functions in DestinationClass to process the input signal, one of which knows how to unpack the signal back to the original objects: public class DestinationClass extends AbstractWiredBox { public DestinationClass() { Connections.getPorts(this).addSignalProcessor(\"replyHello\"); Connections.getPorts(this).addSignalProcessor(\"replyManyThings\"); } public void replyHello(Object input) { Mark.say(\"Destination receives\", input); } public void replyManyThings(Object input) { if (input instanceof Signal) { Signal signal = (Signal) input; String x = signal.get(0, String.class); int y = signal.get(1, Integer.class); Mark.say(\"Destination receives many things\", x, y); } } } Without modifying the test class, we get some result like: >>> Source transmits many things Hello world 11 >>> Source transmits Signals.Signal@30f39991 >>> Destination receives Signals.Signal@30f39991 >>> Destination receives many things Hello world 11","title":"You can transmit multiple objects by packing them"},{"location":"wire/#you-can-add-interim-class","text":"We can add one interim class to process the output signal: public class InterimClass extends AbstractWiredBox { public InterimClass() { Connections.getPorts(this).addSignalProcessor(\"process\"); } public void process(Object input) { input = (Object) ((String) input + \" (processed)\"); Connections.getPorts(this).transmit(input); } } We rewire the connection between SourceClass and DestinationClass so that signal is processed by InterimClass before reaching DestinationClass : public class TestWire { public static void main(String[] args) { SourceClass source = new SourceClass(); DestinationClass destination = new DestinationClass(); InterimClass interim = new InterimClass(); Connections.wire(source, interim); Connections.wire(interim, destination); source.sayHello(); } } The output will be: >>> Source transmits Hello world >>> Destination receives Hello world (processed)","title":"You can add interim class"},{"location":"wire/#you-can-turn-existing-subclasses-into-boxes","text":"Suppose you have a class that already extends some other class. You won't be able to make it extend AbstractWiredBox class. So you can make it implement the Wiredbox interface instead. The only extra step is to implement a getName method: public class SourceClass implements WiredBox { @Override public String getName() { return null; } ... }","title":"You can turn existing subclasses into boxes"},{"location":"wire/#you-can-use-multiple-input-ports-or-multiple-output-ports","text":"Between two wired boxes, signals can be transmitted from and received by different ports. To refined three functions of the Connections class: Connections.wire( [sourcePortName,] source, [destinationPortName,] destination) sets up connections between wired boxes. Connections.getPorts(this).transmit( [sourcePortName,] signal) transmits a signal via an instance\u2019s output port, optionally named sourcePortName . Connections.getPorts(this).addSignalProcessor([destinationPortName,] \"functionName\") specifies the function to process the signal once it is received via an instance\u2019s input port, optionally named destinationPortName . For example, SourceClass may have two ways of sending signals: public class SourceClass extends AbstractWiredBox { public static final String OUTPUT_PORT_1 = \"port 1 output\"; public static final String OUTPUT_PORT_2 = \"port 2 output\"; public void sayHello() { String signal = \"Hello world\"; Mark.say(\"Source transmits\", signal); Connections.getPorts(this).transmit(OUTPUT_PORT_1, signal); } public void sayHelloAgain() { String signal = \"Hello world again\"; Mark.say(\"Source transmits again\", signal); Connections.getPorts(this).transmit(OUTPUT_PORT_2, signal); } } Accordingly, DestinationClass may have two ways of processing signals: public class DestinationClass extends AbstractWiredBox { public static final String INPUT_PORT_1 = \"port 1 input\"; public static final String INPUT_PORT_2 = \"port 2 input\"; public DestinationClass() { Connections.getPorts(this).addSignalProcessor(INPUT_PORT_1, \"replyHello\"); Connections.getPorts(this).addSignalProcessor(INPUT_PORT_2, \"replyHelloAgain\"); } public void replyHello(Object input) { Mark.say(\"Destination receives\", input); } public void replyHelloAgain(Object input) { Mark.say(\"Destination receives again\", input); } } In TestWire : public class TestWire { public static void main(String[] args) { SourceClass source = new SourceClass(); DestinationClass destination = new DestinationClass(); Connections.wire(SourceClass.OUTPUT_PORT_1, source, DestinationClass.INPUT_PORT_1, destination); Connections.wire(SourceClass.OUTPUT_PORT_2, source, DestinationClass.INPUT_PORT_2, destination); source.sayHello(); source.sayHelloAgain(); } } The output will be: >>> Source transmits Hello world >>> Destination receives Hello world >>> Source transmits again Hello world again >>> Destination receives again Hello world again This version is edited by Zhutian Yang, on 5 August 2019 An older version is authored by Patrick H. Winston, on 7 October 2014","title":"You can use multiple input ports or multiple output ports"},{"location":"ztyang/","text":"Ideas by Yang The Mental Emulator Someone jump to conclusions very soon. Someone always asks \"how\" and \"why\". No particular ways to think is the best. But some are better to use for effective communication and building rapport with another person. Imagine someone is having a conversation with Genesis. If Genesis can detect his thinking patterns early on in the conversation and emulate his ways to think, as opposed to sticking to Genesis' default ways to think, then Genesis can communicate more effectively with the person and build rapport faster. The Mental Emulator should be one kind of Social Emulators. The other Social Emulators include postures, words choices, accents, facial expressions, and many other surface features. Although all Social Emulators makes it easier to build rapport, the Mental Emulator probably does it in the deepest level because it's so much easier to think if the other person understands and thinks along your direction. The Mental Emulator is hardest to detect because people usually stick to their own ways to think. The Negative Reinforcer Imagine you usually lock your blue bike next to your office building. One day, you were trying to lock your bike, and you accidentally knocked down the black bike next to you. That's because the owner of the black bike placed the bike too close to the other spot, which you were using. You helped the black bike stand still. You were afraid that the fall would have left scratches on the black bike, which would annoy the owner. Luckily that didn't happen. What happened was that whenever you lock your bike again, you try to place your bike as close to your spot as possible. You think, in that way the others will not knock down your bike and leave a scratch on it, which would annoy you. You wouldn't have planned this step to prevent damage if you haven't been in the role of causing damage. Here are more stories of learning from negative examples: After teaching a class full of naughty students, you knew how to be a better student looking at her and respond anything to her questions. After listening to a useless lecture, you knew how to be a better teacher by telling the students what they will learn and how they can apply. Here is the possible mechanism behind the Negative Reinforcer (NR): NR has several life principles or likes, each of which is a concept pattern, such as: Don't annoy other people I don't like to be annoyed NR detects the patterns in stories and find out the actions that lead to the principles being violated. such as: The owner may be annoyed because I have left a scratch on his car because I knocked down his bike because his bike gets in the way for me the lock my bike. Identify the actions that can prevent the causes from happening: Be careful when placing my bike into clusters of other bikes so that others will not be annoyed Don't place my bike in a way that might get in the ways of others so that I will not be annoyed Either update in our procedures to do things or build checker programs to respond to triggers of its potential happening. Have a checker to solve \"if my actions will knock down other's bikes\" Have a checker to solve \"if my bike placed properly\" Optionally include these two checkers (including the steps to fix the situation) into procedures to lock bikes. Generalize to other tasks and domains. Reinforce beliefs Principle Builders Where do life principles come from? Here are several possible ways to acquire them: Reinforced: adherence to the principle is rewarded while violation is punished Remembered: someone important to Genesis told it to do so Derived: derived from likes, wants, goals, existing principles, and commonsense, for example: A: I don't like to be annoyed B: Treat others the way you want to be treated C = A x B: Don't annoy other people D: I want to be liked by people E: If I annoy someone, he wouldn't like me. F = D x E: Don't annoy other people Preference Builders Where do likes come from? Here are several possible ways to acquire them: Derived from value: A: I value time B: Being annoyed takes away my time C = A x B: I don't like to be annoyed Derived from biological/computational limitations: D: I must not crash E: I will crash when I feel stressed/overloaded by the negative implications of a current or future event (measured by the amount of search) F: Being asked to be his girlfriend stressed me out G = D x E: I don't like to be stressed out H = F x G: I don't like to be asked to be his girlfriend Value Builders Where do values come from? Here are several possible ways to acquire them: Derived from goals: A: I must get good grades in school B: If I want to get good grades, I need to study hard C: If I want to study hard, I need to use a lot of time D: If I don't value time, I don't have a lot of time to use E = D x C x B x A: I must value time. And then this belief is used without much inspection in other domains too. And then you could ask where do goals come from ... we go into loops. Identity Builders Let's name all these likes, wants, values, principles as one's identity. It subjective beliefs about what one should be/do. I hypothesize that our the beliefs in our identity are built up from shaky derivations from one another. The ultimate source is: Remembered: what we think the people important to us want us to be/do Reinforced: without major system crash to question the validity of existing identity Speaking of \"subjective,\" how objective can we be about other beliefs. We may believe in: Apples are good for health If one wants to make a difference, he must be rich first I hypothesize that our objective beliefs come from repetition of nearby sources, such as the books, the media, our teachers, our family ... So objectivity may just be collective subjectivity. Belief Builders So without all these Principle Builders, Preference Builders, Value Builders, Goal Builders, and Identity Builders, we will only have Belief Builders. Think about the ways we categorize subjective beliefs into likes, wants, values, and principles. Do we actually learn the way to categorize them after we had the beliefs and used the beliefs. Look at how easy it is to categorize them by the verb, \"like,\" \"want,\" \"value,\" and \"do/don't.\" Maybe their categorization is the artifact of language and less useful for our reasoning. So I will just create a Belief Builder to remember the beliefs imparted by other sources and reinforced though Genesis' experience.","title":"Ideas by Yang"},{"location":"ztyang/#ideas-by-yang","text":"","title":"Ideas by Yang"},{"location":"ztyang/#the-mental-emulator","text":"Someone jump to conclusions very soon. Someone always asks \"how\" and \"why\". No particular ways to think is the best. But some are better to use for effective communication and building rapport with another person. Imagine someone is having a conversation with Genesis. If Genesis can detect his thinking patterns early on in the conversation and emulate his ways to think, as opposed to sticking to Genesis' default ways to think, then Genesis can communicate more effectively with the person and build rapport faster. The Mental Emulator should be one kind of Social Emulators. The other Social Emulators include postures, words choices, accents, facial expressions, and many other surface features. Although all Social Emulators makes it easier to build rapport, the Mental Emulator probably does it in the deepest level because it's so much easier to think if the other person understands and thinks along your direction. The Mental Emulator is hardest to detect because people usually stick to their own ways to think.","title":"The Mental Emulator"},{"location":"ztyang/#the-negative-reinforcer","text":"Imagine you usually lock your blue bike next to your office building. One day, you were trying to lock your bike, and you accidentally knocked down the black bike next to you. That's because the owner of the black bike placed the bike too close to the other spot, which you were using. You helped the black bike stand still. You were afraid that the fall would have left scratches on the black bike, which would annoy the owner. Luckily that didn't happen. What happened was that whenever you lock your bike again, you try to place your bike as close to your spot as possible. You think, in that way the others will not knock down your bike and leave a scratch on it, which would annoy you. You wouldn't have planned this step to prevent damage if you haven't been in the role of causing damage. Here are more stories of learning from negative examples: After teaching a class full of naughty students, you knew how to be a better student looking at her and respond anything to her questions. After listening to a useless lecture, you knew how to be a better teacher by telling the students what they will learn and how they can apply. Here is the possible mechanism behind the Negative Reinforcer (NR): NR has several life principles or likes, each of which is a concept pattern, such as: Don't annoy other people I don't like to be annoyed NR detects the patterns in stories and find out the actions that lead to the principles being violated. such as: The owner may be annoyed because I have left a scratch on his car because I knocked down his bike because his bike gets in the way for me the lock my bike. Identify the actions that can prevent the causes from happening: Be careful when placing my bike into clusters of other bikes so that others will not be annoyed Don't place my bike in a way that might get in the ways of others so that I will not be annoyed Either update in our procedures to do things or build checker programs to respond to triggers of its potential happening. Have a checker to solve \"if my actions will knock down other's bikes\" Have a checker to solve \"if my bike placed properly\" Optionally include these two checkers (including the steps to fix the situation) into procedures to lock bikes. Generalize to other tasks and domains. Reinforce beliefs","title":"The Negative Reinforcer"},{"location":"ztyang/#principle-builders","text":"Where do life principles come from? Here are several possible ways to acquire them: Reinforced: adherence to the principle is rewarded while violation is punished Remembered: someone important to Genesis told it to do so Derived: derived from likes, wants, goals, existing principles, and commonsense, for example: A: I don't like to be annoyed B: Treat others the way you want to be treated C = A x B: Don't annoy other people D: I want to be liked by people E: If I annoy someone, he wouldn't like me. F = D x E: Don't annoy other people","title":"Principle Builders"},{"location":"ztyang/#preference-builders","text":"Where do likes come from? Here are several possible ways to acquire them: Derived from value: A: I value time B: Being annoyed takes away my time C = A x B: I don't like to be annoyed Derived from biological/computational limitations: D: I must not crash E: I will crash when I feel stressed/overloaded by the negative implications of a current or future event (measured by the amount of search) F: Being asked to be his girlfriend stressed me out G = D x E: I don't like to be stressed out H = F x G: I don't like to be asked to be his girlfriend","title":"Preference Builders"},{"location":"ztyang/#value-builders","text":"Where do values come from? Here are several possible ways to acquire them: Derived from goals: A: I must get good grades in school B: If I want to get good grades, I need to study hard C: If I want to study hard, I need to use a lot of time D: If I don't value time, I don't have a lot of time to use E = D x C x B x A: I must value time. And then this belief is used without much inspection in other domains too. And then you could ask where do goals come from ... we go into loops.","title":"Value Builders"},{"location":"ztyang/#identity-builders","text":"Let's name all these likes, wants, values, principles as one's identity. It subjective beliefs about what one should be/do. I hypothesize that our the beliefs in our identity are built up from shaky derivations from one another. The ultimate source is: Remembered: what we think the people important to us want us to be/do Reinforced: without major system crash to question the validity of existing identity Speaking of \"subjective,\" how objective can we be about other beliefs. We may believe in: Apples are good for health If one wants to make a difference, he must be rich first I hypothesize that our objective beliefs come from repetition of nearby sources, such as the books, the media, our teachers, our family ... So objectivity may just be collective subjectivity.","title":"Identity Builders"},{"location":"ztyang/#belief-builders","text":"So without all these Principle Builders, Preference Builders, Value Builders, Goal Builders, and Identity Builders, we will only have Belief Builders. Think about the ways we categorize subjective beliefs into likes, wants, values, and principles. Do we actually learn the way to categorize them after we had the beliefs and used the beliefs. Look at how easy it is to categorize them by the verb, \"like,\" \"want,\" \"value,\" and \"do/don't.\" Maybe their categorization is the artifact of language and less useful for our reasoning. So I will just create a Belief Builder to remember the beliefs imparted by other sources and reinforced though Genesis' experience.","title":"Belief Builders"}]}